<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OptoMMP3</name>
    </assembly>
    <members>
        <member name="T:Opto22.Crc.Crc">
            <summary>
            An object to compute message hashes (CRC's).
            </summary>
        </member>
        <member name="F:Opto22.Crc.Crc.i32ConstHashSize256">
            <summary>
            Hash sizes.
            </summary>
        </member>
        <member name="F:Opto22.Crc.Crc.CrcMethod">
            <summary>
            Constructed method for this object.
            </summary>
        </member>
        <member name="F:Opto22.Crc.Crc.u16aryHash">
            <summary>
            The hashing table appropriate to the method.
            </summary>
        </member>
        <member name="M:Opto22.Crc.Crc.#ctor(Opto22.Crc.Crc.eCrcMethod)">
            <summary>
            Constructor
            </summary>
            <param name="CrcMethod">CRC (Hashing) method this object will process.</param>
        </member>
        <member name="M:Opto22.Crc.Crc.CrcCh(System.UInt16,System.UInt32)">
            <summary>
            Calculate table hashing data. This is used only by the constructor.
            </summary>
            <param name="u16Poly"></param>
            <param name="u32Data"></param>
            <returns></returns>
        </member>
        <member name="M:Opto22.Crc.Crc.CrcChReverse(System.UInt16,System.UInt32)">
            <summary>
            Calculate table hashing data. This is used only by the constructor.
            </summary>
            <param name="u16Poly"></param>
            <param name="u32Data"></param>
            <returns></returns>
        </member>
        <member name="M:Opto22.Crc.Crc.GenerateCrc(System.Byte[],System.Int32,System.Int32,System.UInt16@)">
            <summary>
            Generate CRC based on the constructed method of this object.
            </summary>
            <param name="byaryData">The byte array to CRC.</param>
            <param name="i32StartOffset">Starting offset to calculate CRC.</param>
            <param name="i32Length">Length, starting from index 0 to CRC.</param>
            <param name="u16Crc"> Crc, [in-out parameter] for Mistic initially set to zero, for Modbus set to 0xffff (UInt16.MaxValue) prior to calling. /// </param>
            <returns>A UInt16 value representing the CRC.</returns>
        </member>
        <member name="P:Opto22.Crc.Crc.Method">
            <summary>
            Get the method this instance is set too.
            </summary>
        </member>
        <member name="T:Opto22.Crc.Crc.eCrcMethod">
            <summary>
            CRC Methods available.
            </summary>
        </member>
        <member name="F:Opto22.Crc.Crc.eCrcMethod.Crc16Reverse">
            <summary>
            Opto 22 Mistic and Modbus (Crc16 Reverse) and SNAP-PAC-SB's use this option.
            Note, B3000's say "CRC16" when it is really CRC16 _REVERSE_. The difference between
            Mistic and Modbus is the initial CRC seed value (0) for Mistic, (0xffff) for Modbus.
            </summary>
        </member>
        <member name="F:Opto22.Crc.Crc.eCrcMethod.Checksum256">
            <summary>
            Opto 22 Mistic (Checksum) and Optomux use this option.
            </summary>
        </member>
        <member name="T:Opto22.Ip4.Udp_Server">
            <summary>
            Udp Server
            </summary>
        </member>
        <member name="F:Opto22.Ip4.Udp_Server.server">
            <summary>
            The socket.
            </summary>
        </member>
        <member name="M:Opto22.Ip4.Udp_Server.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Opto22.Ip4.Udp_Server.Open6(System.Int32)">
            <summary>
            Open a UDP/IPV6 Server
            </summary>
            <param name="i32SourcePort">Server port to open.</param>
            <returns>0 is successful, -1 is error, probably the port number is already in use or no permission to use it</returns>
        </member>
        <member name="M:Opto22.Ip4.Udp_Server.Open(System.Int32)">
            <summary>
            Open a UDP/IP Server Object
            </summary>
            <param name="i32SourcePort">The source port. Range is typically 1024 through 65535</param>
            <returns>0 is OK, -1 is a socket creation or bind error</returns>
        </member>
        <member name="M:Opto22.Ip4.Udp_Server.Close">
            <summary>
            Close the UDP/IP Server Object
            </summary>
        </member>
        <member name="M:Opto22.Ip4.Udp_Server.Receive(System.Byte[],System.Int32,System.Net.EndPoint@)">
            <summary>
            Receive Data From the UDP/IP Server Socket
            </summary>
            <param name="byary">A byte array who's length determines the maximum receive size.</param>
            <param name="i32TimeoutMs">The number of milliseconds to wait for data.</param>
            <param name="SourceEndpt">The source of where the packet comes from.</param>
            <returns>Positive values for data, zero for timeout, -1 for socket faults</returns>
        </member>
        <member name="M:Opto22.Ip4.Udp_Server.Send(System.Byte[],System.Int32,System.Net.EndPoint)">
            <summary>
            Sends data to a specific endpoint.
            </summary>
            <param name="byary">Byte array to transmit, at least i32Tx_Length long.</param>
            <param name="i32TxLength">The number of bytes to transmit of the array starting at index 0.</param>
            <param name="SourceEndpt">The destination endpoInt32 where to send this data too.</param>
            <returns>Positive values are okay, negative values indicate connection fault.</returns>
        </member>
        <member name="M:Opto22.Ip4.Udp_Server.Get_Socket">
            <summary>
            Gets a copy of the socket structure.
            </summary>
            <returns>The socket.</returns>
        </member>
        <member name="M:Opto22.Ip4.Udp_Server.Set_Socket(System.Net.Sockets.Socket)">
            <summary>
            Sets this object's server socket.
            </summary>
            <param name="Socket"></param>
        </member>
        <member name="T:Opto22.Ip4.Udp_Client">
            <summary>
            UDP/IP Client
            </summary>
        </member>
        <member name="F:Opto22.Ip4.Udp_Client.sError">
            <summary>
            last exception message
            </summary>
        </member>
        <member name="F:Opto22.Ip4.Udp_Client.m_ClientSocket">
            <summary>
            client socket
            </summary>
        </member>
        <member name="F:Opto22.Ip4.Udp_Client.CurrentEndPoint">
            <summary>
            current endpoint transmitted too
            </summary>
        </member>
        <member name="M:Opto22.Ip4.Udp_Client.Open6(System.String,System.Int32)">
            <summary>
            Open a UDP/IPV6 client object.
            </summary>
            <param name="sHost">String of the Host's name or IP address in dot format.</param>
            <param name="i32Port">The UDP port number of the remote host.</param>
            <returns></returns>
        </member>
        <member name="M:Opto22.Ip4.Udp_Client.Open(System.String,System.Int32)">
            <summary>
            Open a UDP/IP client object.
            </summary>
            <param name="sHost">String of the Host's name or IP address in dot format.</param>
            <param name="i32Port">The UDP port number of the remote host.</param>
            <returns></returns>
        </member>
        <member name="M:Opto22.Ip4.Udp_Client.IsOpen">
            <summary>
            Tests to see if the socket has been opened, that open was called on this object.
            <para>
            For UDP sockets, there is no connection so after the Open is called, it "always" appears connected.
            </para>
            </summary>
            <returns>True if the socket is open. False otherwise.</returns>
        </member>
        <member name="M:Opto22.Ip4.Udp_Client.Close">
            <summary>
            Close the UDP/IP client object.
            </summary>
        </member>
        <member name="M:Opto22.Ip4.Udp_Client.Receive(System.Byte[],System.Int32)">
            <summary>
            Receive data from the UDP/IP client object.
            </summary>
            <param name="byary">Byte array to store data</param>
            <param name="i32TimeoutMs">Timeout in Milliseconds to Wait</param>
            <returns>Greater than zero indicates bytes received, zero indicates timeout, -1 is a fault.</returns>
        </member>
        <member name="M:Opto22.Ip4.Udp_Client.Receive(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Receive data from the UDP/IP client socket and specified which portion of the array to populate.
            </summary>
            <param name="byary">Byte array to store received data.</param>
            <param name="iOffset">Offset in the array to start receiving data.</param>
            <param name="iMaxSize">Maximum size to receive.</param>
            <param name="i32TimeoutMs">Timeout to implement data.</param>
            <returns>Positive value indicate data returned, 0 is timeout, -1 is a communication fault.</returns>
        </member>
        <member name="M:Opto22.Ip4.Udp_Client.Send(System.Byte[],System.Int32)">
            <summary>
            Send data to the UDP/IP server.
            </summary>
            <param name="byary">Bytes to send, at least i32Tx_Length in length.</param>
            <param name="i32Tx_Length">Number of bytes to send.</param>
            <returns>0 if successful, -1 if there is a socket error.</returns>
        </member>
        <member name="T:Opto22.Ip4.Tcp_Server">
            <summary>
            TCP/IP server-side helper.
            </summary>
        </member>
        <member name="M:Opto22.Ip4.Tcp_Server.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Opto22.Ip4.Tcp_Server.Open(System.Int32,System.Int32)">
            <summary>
            Opens a TCP/IPv4 or IPv6 Server
            </summary>
            <param name="i32SourcePort">TCP/IP port to bind too. This is the service port location typically from 1024 to 65535</param>
            <param name="i32Backlog">Number of incoming TCP/IP connect requests to backlog.</param>
            <returns>0 indicates success, -1 indicates a connection failure.</returns>
        </member>
        <member name="M:Opto22.Ip4.Tcp_Server.Close">
            <summary>
            Closes the TCP/IP Server. Do this only on application exit.
            </summary>
        </member>
        <member name="M:Opto22.Ip4.Tcp_Server.Accept(System.Net.Sockets.Socket@,System.Int32,System.Net.EndPoint@)">
            <summary>
            Accept an incoming TCP/IP connection.
            </summary>
            <param name="ClientSocket">A socket to store the incoming TCP/IP connection.</param>
            <param name="i32TimeoutMs">Number of milliseconds to wait for an incoming connect request.</param>
            <param name="RemoteEndpoint">The remote endpoInt32 so application can check to see if this is a valid host.</param>
            <returns>true if a connection arrives, if so, ClientSocket is valid.</returns>
        </member>
        <member name="T:Opto22.Ip4.Tcp_Client">
            <summary>
            An class to simplify a TCP/IP client-side socket.
            </summary>
            <para>
            Exposed to help users of SNAP-PAC Serial Modules. Property Socket.NoDelay
            is set to true to provide as responsive data transmission as possible.
            </para>
        </member>
        <member name="F:Opto22.Ip4.Tcp_Client.strError">
            <summary>
            Last Exception Thrown (when -1 is returned).
            </summary>
        </member>
        <member name="M:Opto22.Ip4.Tcp_Client.#ctor">
            <summary>
            Constructor for the Tcp_Client.
            </summary>
        </member>
        <member name="M:Opto22.Ip4.Tcp_Client.Open(System.Net.Sockets.Socket,System.Net.EndPoint)">
            <summary>
            Open a TCP/IP client object from a Socket accepted from the TCP/IP Server Object
            </summary>
            <param name="ClientSocket">The accepted TCP/IP socket returned from Tcp_Server.Accept()</param>
            <param name="RemoteEndpoint">An endpoInt32 structure from the Accept method.</param>
        </member>
        <member name="M:Opto22.Ip4.Tcp_Client.Open6(System.String,System.Int32)">
            <summary>
            Connect to a TCP/IPv6 Server. (Blocked Call, may take up to 30 seconds to complete)
            </summary>
            <param name="sHost">IPV6 Host name in name or colon address format.</param>
            <param name="iPort">TCP/IP server port to connect too.</param>
            <returns>0 indicates success, -1 indicates failure</returns>
        </member>
        <member name="M:Opto22.Ip4.Tcp_Client.Open(System.String,System.Int32)">
            <summary>
            Connect to a TCP/IPv4 Server. (Blocked Call, may take up to 30 seconds to complete)
            </summary>
            <param name="sHost">Host name in name or dot IP Address format.</param>
            <param name="i32Port">TCP/IP server port to connect too.</param>
            <returns>0 indicates success, -1 indicates failure</returns>
        </member>
        <member name="M:Opto22.Ip4.Tcp_Client.Open(System.String,System.Int32,System.Int32)">
            <summary>
            Connect to a TCP/IPv4 Server. (Blocked version with timeout)
            </summary>
            <param name="sHost">Host name in name or dot IP Address format.</param>
            <param name="i32Port">TCP/IP server port to connect too.</param>
            <param name="i32TimeoutMs">Timeout is Milliseconds to wait for the connection to complete.</param>
            <returns>0 indicates success, -1 indicates failure</returns>
        </member>
        <member name="M:Opto22.Ip4.Tcp_Client.Open6(System.String,System.Int32,System.Int32)">
            <summary>
            Connect to a TCP/IPv6 Server. (Blocked version with timeout)
            </summary>
            <param name="sHost">Host name in name or dot IP Address format.</param>
            <param name="i32Port">TCP/IP server port to connect too.</param>
            <param name="i32TimeoutMs">Timeout is Milliseconds to wait for the connection to complete.</param>
            <returns>0 indicates success, -1 indicates failure</returns>
        </member>
        <member name="M:Opto22.Ip4.Tcp_Client.IsOpen">
            <summary>
            Tests to see if the socket is writeable. Does not mean the network is available to transmit.
            Please see the internet for additional information for half-open TCP sessions.
            <para>
            Valid half-open TCP sockets will appear writeable. This function only tests to see if the socket
            appears if data may be sent and _after_ the "connect" has been validated and completed.
            </para>
            </summary>
            <returns>True if the socket is open and appears writeable. False otherwise.</returns>
        </member>
        <member name="M:Opto22.Ip4.Tcp_Client.Close">
            <summary>
            Close the TCP/IP connection.
            </summary>
            <returns>-1 if a fault occured. The object is still closed if -1 returns. Check strLastFault for message.</returns>
        </member>
        <member name="M:Opto22.Ip4.Tcp_Client.Receive(System.Byte[],System.Int32)">
            <summary>
            Receive data from the TCP/IP connection.
            </summary>
            <param name="byary">Byte array to store the received data.</param>
            <param name="i32Timeout_Ms">Timeout interval in milliseconds.</param>
            <returns>Positive values for data received, zero for timeout. When receiving a negative value, close the socket.</returns>
        </member>
        <member name="M:Opto22.Ip4.Tcp_Client.Receive(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Receive data from the TCP/IP connection and store to a particular section of the byte array.
            </summary>
            <param name="byary">Byte array to store the received data.</param>
            <param name="i32Offset">Offset in the buffer to begin receiving data.</param>
            <param name="i32MaxSize">The maximum receive size to byary. Allows receives smaller than byary.</param>
            <param name="i32TimeoutMs">Timeout interval in milliseconds.</param>
            <returns>Positive values for data received, zero for timeout. When receiving a negative value, close the socket.</returns>
        </member>
        <member name="M:Opto22.Ip4.Tcp_Client.Send(System.Byte[],System.Int32)">
            <summary>
            Send data to TCP/IP remote host.
            </summary>
            <param name="byary">Bytes to send. Should at least be i32Tx_Length.</param>
            <param name="i32Tx_Length">Number of bytes to send.</param>
            <returns>0 indicates success, if -1 returned, close the TCP/IP connection.</returns>
        </member>
        <member name="T:Opto22.Linearization.Linear">
            <summary>
            Linear scaling object. This is the "good ole" y = m * x + b equation.
            </summary>
            <code>
            (C#)<br />
            Linear linear = new Linear();<br />
            <br />
            // set linear to convert temperature F to C<br />
            Boolean bResult = linear.SetEquation(32.0, 0.0, 212.0, 100.0);<br />
            <br />
            Double dDegreesF;<br />
            Double dDegreesC;<br />
            <br />
            // freezing point<br />
            dDegreesF = 32.0;<br />
            dDegreesC = linear.Compute(dDegreesF);<br />
            Console.WriteLine("Freezing temperature {0} F is {1} in C", dDegreesF, dDegreesC.ToString("F1"));<br />
            <br />
            // a typical Temecula summer day<br />
            dDegreesF = 102.0;<br />
            dDegreesC = linear.Compute(dDegreesF);<br />
            Console.WriteLine("Temecula temperature {0} F is {1} in C", dDegreesF, dDegreesC.ToString("F1"));<br />
            <br />
            // boiling point of water at sea level<br />
            dDegreesF = 212.0;<br />
            dDegreesC = linear.Compute(dDegreesF);<br />
            Console.WriteLine("Boiling temperature {0} F is {1} in C", dDegreesF, dDegreesC.ToString("F1"));<br />
            <br />
            // where the two temperatures intersect<br />
            dDegreesF = -40.0;<br />
            dDegreesC = linear.Compute(dDegreesF);<br />
            Console.WriteLine("Cross temperature {0} F is {1} in C", dDegreesF, dDegreesC.ToString("F1"));<br />
            </code>
        </member>
        <member name="F:Opto22.Linearization.Linear.dSlope">
            <summary>
            slope
            </summary>
        </member>
        <member name="F:Opto22.Linearization.Linear.dIntercept">
            <summary>
            intercept
            </summary>
        </member>
        <member name="F:Opto22.Linearization.Linear.objLock">
            <summary>
            Lock object
            </summary>
        </member>
        <member name="F:Opto22.Linearization.Linear.bSet">
            <summary>
            Indicates if the equation parameters are set.
            </summary>
        </member>
        <member name="M:Opto22.Linearization.Linear.SetEquation(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set the parameters of this object.
            <para>
            Two points of a linear line are required to set the equation parameters. We call
            these points P1 and P2; with input and output values of dInput1, dInput2, dOutput1 and dOutput2.
            </para>
            </summary>
            <param name="dInput1">The input for point P1.</param>
            <param name="dOutput1">The output for point P1.</param>
            <param name="dInput2">The input for point P2.</param>
            <param name="dOutput2">The output for point P2.</param>
            <returns>
            True if the method was successful, false if not (because dInput1 and dInput2
            are the same value. If this is not checked, it will result in a
            divide-by-zero exception.
            </returns>
        </member>
        <member name="M:Opto22.Linearization.Linear.Compute(System.Double)">
            <summary>
            Compute the output
            </summary>
            <param name="dInput">Input to compute.</param>
            <returns>The output if the parameters are properly set using SetEquation() or Double.Nan if not.</returns>
        </member>
        <member name="T:Opto22.Linearization.Polynomial">
            <summary>
            Polynomial linearization object.
            <para>
            Computes a linearization equation like: F(x) = c(0) + c(1)x + c(2)x^2 + c(3)x^3 + ... + c(n)x^n
            where:
            c(n) is the coefficient
            x^n is the input raised to the power of 'n'
            </para>
            <para>
            Polynomial linearization is commonly used for various thermocouples or non-linear displacement measurement.
            </para>
            </summary>
            <code>
            (C#)<br />
            Polynomial poly = new Polynomial(9);<br />
            <br />
            // initialize the polynomial coefficients, "Inverse coefficients for Type J",<br />
            // http://srdata.nist.gov/its90/download/type_j.tab<br />
            // for 0 to 760 C, 0 to 42.919 mv<br />
            // an example... in the SNAP series, the Cold-Junction-Compensation is not available to read<br />
            // so you can't calculate the compensated probe temperature<br />
            poly.SetCoefficient(0, 0.0);<br />
            poly.SetCoefficient(1, 1.978425e1);<br />
            poly.SetCoefficient(2, -2.001204e-1);<br />
            poly.SetCoefficient(3, 1.036969e-2);<br />
            poly.SetCoefficient(4, -2.549687e-4);<br />
            poly.SetCoefficient(5, 3.585153e-6);<br />
            poly.SetCoefficient(6, -5.344285e-8);<br />
            poly.SetCoefficient(7, 5.099890e-10);<br />
            poly.SetCoefficient(8, 0.0);<br />
            <br />
            Double dMillivolts;<br />
            Double dTemperature;<br />
            <br />
            // 0.0 millivolts (0C)<br />
            dMillivolts = 0.0;<br />
            dTemperature = poly.Compute(dMillivolts);<br />
            Console.WriteLine("J Thermocouple; {0} millivolts is {1} C", dMillivolts.ToString("F1"), dTemperature.ToString("F1"));<br />
            <br />
            // 2.059 millivolts (40C)<br />
            dMillivolts = 2.059;<br />
            dTemperature = poly.Compute(dMillivolts);<br />
            Console.WriteLine("J Thermocouple; {0} millivolts is {1} C", dMillivolts.ToString("F1"), dTemperature.ToString("F1"));<br />
            
            // 5.269 millivolts (100C)<br />
            dMillivolts = 5.269;<br />
            dTemperature = poly.Compute(dMillivolts);<br />
            Console.WriteLine("J Thermocouple; {0} millivolts is {1} C", dMillivolts.ToString("F1"), dTemperature.ToString("F1"));<br />
            <br />
            // 16.327 millivolts (300C) <br />
            dMillivolts = 16.327;<br />
            dTemperature = poly.Compute(dMillivolts);<br />
            Console.WriteLine("J Thermocouple; {0} millivolts is {1} C", dMillivolts.ToString("F1"), dTemperature.ToString("F1"));<br />
            <br />
            // 42.919 millivolts (700C)<br />
            dMillivolts = 42.919;<br />
            dTemperature = poly.Compute(dMillivolts);<br />
            Console.WriteLine("J Thermocouple; {0} millivolts is {1} C", dMillivolts.ToString("F1"), dTemperature.ToString("F1"));<br />
            </code>
        </member>
        <member name="F:Opto22.Linearization.Polynomial.daryCoefficients">
            <summary>
            array of polynomial coefficients
            </summary>
        </member>
        <member name="F:Opto22.Linearization.Polynomial.objLock">
            <summary>
            lock object
            </summary>
        </member>
        <member name="M:Opto22.Linearization.Polynomial.#ctor(System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="i32Order">The polynomial order the object will be intialized with. Maybe larger than needed, unused powers are zero.</param>
        </member>
        <member name="M:Opto22.Linearization.Polynomial.SetCoefficient(System.Int32,System.Double)">
            <summary>
            Set a coefficient
            </summary>
            <param name="i32Index">Coefficient index to set. The index is values of 0 to i32Order - 1 as set in the constructor method.</param>
            <param name="dCoefficient">The coefficient of this index.</param>
            <returns>true when the coefficient is set, false if the index is out of range.</returns>
        </member>
        <member name="M:Opto22.Linearization.Polynomial.Compute(System.Double)">
            <summary>
            Compute the linearization.
            <para>
            Note, this method does not check for any out-of-bound condition.
            </para>
            </summary>
            <param name="dInput">The input to linearize.</param>
            <returns>The linearized output.</returns>
        </member>
        <member name="T:Opto22.Linearization.PiecewiseLinear">
            <summary>
            Piecewise Linearization
            <para>
            Piecewise linearization is typically used for thermocouple, high-temperature resistive and capacitive
            measurement (where the extreme temperatures cause non-linear responses), non-linear mechanical
            systems, and converting pressure to tank level (or capacity).
            </para>
            </summary>
            <code>
            (C#)<br />
            // input resistance values of an Omega 44007 probe, the resistance is decending with each next element<br />
            // this is an abbreviated table...<br />
            Double[] daryR_Input = <br />
            {<br />
            	10960.0, 10440.0,  9951.0,  9486.0,  9046.0,  8628.0,  8232.0,  7857.0,<br />
            	 7500.0,  7162.0,  6841.0,  6536.0,  6247.0,  5972.0,  5710.0,  5462.0,<br />
            	 5225.0,  5000.0,  4787.0,  4583.0,  4389.0,  4204.0,  4029.0,  3861.0,<br />
            	 3702.0,  3549.0,  3404.0,  3266.0,  3134.0,  3008.0,  2888.0,  2773.0,<br />
            	 2663.0,  2559.0,  2459.0,  2363.0,  2272.0,  2184.0,  2101.0,  2021.0,<br />
            	 1944.0,  1871.0,  1801.0,  1244.0,   875.7,   628.1,   458.2,   339.6,<br />
            	  255.4,   194.7,   150.3,   117.4,    92.7<br />
            };<br />
            <br />
            // corresponding temperature output for the resistance table.<br />
            Double[] daryC_Output =<br />
            {<br />
            	 8.0,    9.0,   10.0,   11.0,   12.0,   13.0,   14.0,   15.0,<br />
            	16.0,   17.0,   18.0,   19.0,   20.0,   21.0,   22.0,   23.0,<br />
            	24.0,   25.0,   26.0,   27.0,   28.0,   29.0,   30.0,   31.0,<br />
            	32.0,   33.0,   34.0,   35.0,   36.0,   37.0,   38.0,   39.0,<br />
            	40.0,   41.0,   42.0,   43.0,   44.0,   45.0,   46.0,   47.0,<br />
            	48.0,   49.0,   50.0,   60.0,   70.0,   80.0,   90.0,  100.0,<br />
               110.0,  120.0,  130.0,  140.0,  150.0<br />
            };<br />
            <br />
            // our linearization object, note the false argument to indicate a decreasing input table<br />
            PiecewiseLinear piecewise = new PiecewiseLinear(daryR_Input.Length, false);<br />
            <br />
            // initialize the coefficients<br />
            for (Int32 i = 0; i &lt; daryR_Input.Length; i++)<br />
            {<br />
            	// set the table element<br />
            	piecewise.SetLookupElement(i, daryR_Input[i], daryC_Output[i]);<br />
            }<br />
            <br />
            Double dResistanceInput;<br />
            Double dTemperatureOutput;<br />
            Boolean bOverRange;<br />
            Boolean bUnderRange;<br />
            <br />
            // 5000 ohms (25C)<br />
            dResistanceInput = 5000.00;<br />
            piecewise.Compute(dResistanceInput, out dTemperatureOutput, out bUnderRange, out bOverRange);<br />
            Console.WriteLine("Probe Resistance of {0} Ohms is {1} C", dResistanceInput.ToString("F2"), dTemperatureOutput.ToString("F2"));<br />
            <br />
            // 9951 ohms (10C)<br />
            dResistanceInput = 9951.00;<br />
            piecewise.Compute(dResistanceInput, out dTemperatureOutput, out bUnderRange, out bOverRange);<br />
            Console.WriteLine("Probe Resistance of {0} Ohms is {1} C", dResistanceInput.ToString("F2"), dTemperatureOutput.ToString("F2"));<br />
            <br />
            // 2663 ohms (40C)<br />
            dResistanceInput = 2663.00;<br />
            piecewise.Compute(dResistanceInput, out dTemperatureOutput, out bUnderRange, out bOverRange);<br />
            Console.WriteLine("Probe Resistance of {0} Ohms is {1} C", dResistanceInput.ToString("F2"), dTemperatureOutput.ToString("F2"));<br />
            
            // 458.2 ohms (90C)<br />
            dResistanceInput = 458.2;<br />
            piecewise.Compute(dResistanceInput, out dTemperatureOutput, out bUnderRange, out bOverRange);<br />
            Console.WriteLine("Probe Resistance of {0} Ohms is {1} C", dResistanceInput.ToString("F2"), dTemperatureOutput.ToString("F2"));<br />
            </code>
        </member>
        <member name="F:Opto22.Linearization.PiecewiseLinear.daryInput">
            <summary>
            The input array.
            </summary>
        </member>
        <member name="F:Opto22.Linearization.PiecewiseLinear.daryOutput">
            <summary>
            The output array.
            </summary>
        </member>
        <member name="F:Opto22.Linearization.PiecewiseLinear.objLock">
            <summary>
            Synchronization object.
            </summary>
        </member>
        <member name="F:Opto22.Linearization.PiecewiseLinear.bAscendingInput">
            <summary>
            Flag to indicate if the input array values ascend with increasing indicies, or not...
            </summary>
        </member>
        <member name="M:Opto22.Linearization.PiecewiseLinear.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="i32Length">The length of the table.</param>
            <param name="bAscendingInput">Indicates if the input values ascend with increasing index or not.</param>
        </member>
        <member name="M:Opto22.Linearization.PiecewiseLinear.SetLookupElement(System.Int32,System.Double,System.Double)">
            <summary>
            Set a lookup element in the piecewise linear table.
            </summary>
            <param name="i32Index">The index to set.</param>
            <param name="dInput">The input value at this index.</param>
            <param name="dOutput">The output value at this index.</param>
            <returns>True if the entry is set, false if the index is out of range for the tables.</returns>
        </member>
        <member name="M:Opto22.Linearization.PiecewiseLinear.Compute(System.Double,System.Double@,System.Boolean@,System.Boolean@)">
            <summary>
            Compute the output.
            </summary>
            <param name="dInput">The input to convert.</param>
            <param name="dOutput">The computed output. If the return is false, this value will be Double.NaN.</param>
            <param name="bUnderRange">If this method returns false, check to see if the input was underrange.</param>
            <param name="bOverRange">If this method returns false, check if the input was overrange.</param>
            <returns>True if successful, false if not... check the other arguments of this method for expected values.</returns>
        </member>
        <member name="T:Opto22.Linearization.SteinhartHart">
            <summary>
            Linearization of thermistors using Steinhart-Hart.
            </summary>
            <code>
            (C#)<br />
            //<br />
            // Demonstration for an Omega 2252 Ohm (@ 25C) TH-22 probe.<br />
            // a = 1.470e-3<br />
            // b = 2.3780e-4<br />
            // c = 1.0389e-7<br />
            // Temperature result is in Kelvin.<br />
            //<br />
            Opto22.Linearization.SteinhartHart steinharthart = new SteinhartHart(1.470e-3, 2.3780e-4, 1.0389e-7);<br />
            Double dTemperature;<br />
            Boolean bResult = steinharthart.Compute(2252, out dTemperature);<br />
            if (bResult == true)<br />
            {<br />
            	Console.WriteLine("Linearization should be close to 298.15 Kelvin (25C); Result {0}", dTemperature.ToString("F1"));<br />
            }<br />
            else<br />
            {<br />
            	Console.WriteLine("bResult is false");<br />
            }<br />
            </code>
        </member>
        <member name="F:Opto22.Linearization.SteinhartHart.dCoefA">
            <summary>
            Coeffients provided by user.
            </summary>
        </member>
        <member name="F:Opto22.Linearization.SteinhartHart.dCoefB">
            <summary>
            Coeffients provided by user.
            </summary>
        </member>
        <member name="F:Opto22.Linearization.SteinhartHart.dCoefC">
            <summary>
            Coeffients provided by user.
            </summary>
        </member>
        <member name="F:Opto22.Linearization.SteinhartHart.dCoefSecond">
            <summary>
            Coeffients provided by user.
            </summary>
        </member>
        <member name="M:Opto22.Linearization.SteinhartHart.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="dCoefA">Coefficient A.</param>
            <param name="dCoefB">Coefficient B.</param>
            <param name="dCoefC">Coefficient C. If unknown or not provided, use 0.0.</param>
            <param name="dCoefSecond">Second Order Coefficient. If unknown or not provided, use 0.0.</param>
        </member>
        <member name="M:Opto22.Linearization.SteinhartHart.Compute(System.Double,System.Double@)">
            <summary>
            Compute linearized temperature.
            </summary>
            <param name="dResistanceOhms">Measure thermistor probe resistance.</param>
            <param name="dTemperature">Calculated temperature when method returns true.
            When method returns false, this parameter is set to zero.
            This method usually returns degrees Kelvin.</param>
            <returns>True when successful, false when resistance is less than or equal to zero.</returns>
        </member>
        <member name="T:Opto22.OptoMMP3.OptoMMP">
            <summary>
            Software Development Kit (SDK) for communicating with Opto MMP Devices.
            <para>
            This assembly communicates primarily the SNAP-PAC Ethernet
            product line. This includes the SNAP-PAC-S, SNAP-PAC-R,
            SNAP-PAC-EB, and the SNAP-PAC-SB series of I/O units
            (and wireless versions).
            </para>
            <para>
            Best serial performance is via PCI Express connected serial ports. USB to serial
            converters may work but with additional latency. We tested a very
            limited number of USB converters successfully. In lower performing
            applications, the latency of USB to serial converters may be
            acceptable. Higher performance applications should use Ethernet
            topology for communications.
            </para>
            <para>
            Serial communication throughput is inherently slower compared to
            Ethernet. The slowness is due to two factors, the very slow data
            rate and only a single message may transact over a single serial
            network. Communication throughput may be improved by using multiple
            serial ports and using a separate, asynchronous thread to communicate
            to each serial port. A single OptoMMP object should be associated
            with each serial network.
            </para>
            <para>
            For Ethernet connected devices, an object is responsible for
            communicating to a single Opto MMP device connection. More than
            one object (meaning more than one connection) may be assigned
            to an Opto MMP device. The object contains thread synchronization
            but ideally, sharing an object amongst different threads of execution
            does not work effectively and is discouraged. The object's connection
            is intended to be opened and left open as Int64 as possible until
            the application terminates or a communication fault occurs to the
            device. The object may be reused to communicate to the same object.
            Do not rapidly open and close a single object to communicate to
            multiple Opto MMP devices. Instead, _always_ create an object for
            each device. This will alleviate connection issues and simplify the
            code implementation.
            </para>
            <para>
            For serial devices (SNAP-PAC-SB1 and SNAP-PAC-SB2), an object is
            assigned all the devices contained on a communication (COM) port.
            To communicate with a specific device, set the device address first
            before initiating an access method. If more than one serial port is
            used, multiple objects are uniquely assigned to each communication
            port. For best throughput, each object should be used in a private
            thread of execution to decrease latency by parallelizing scanning.
            </para>
            <para>
            All methods are blocked methods. This means execution within the
            method pauses while the code waits for a response or timeout to occur.
            Higher throughput apps should use multiple threads and multiple
            objects to accelerate data access. But using too many concurrent
            communication objects will degrade the performance of the SNAP-PAC
            device. If many concurrent connections seem to be required, consider
            creating a scanner thread to communicate with the PAC and allow other
            threads to access thread shared data amongst the scanning thread.
            </para>
            <para>
            The methods of this SDK blocks (suspend thread execution) while the
            physical I/O unit is messaged across the network. While usually, this
            is a very fast operation, high-latency networks, serial networks,
            or communication failures make consume a considerable amount of time.
            Due to this potential large consumption of time/resources, we do not
            recommended to implement the SDK within the context of a Windows
            Message/Event handler. Examples of this are mouse, forms, buttons,
            or other application events. This prevents the Windows "hour-glass"
            effect on the interface.
            </para>
            <para>
            Opto 22 strongly recommends the use of UDP when a single network
            segment (no routers) is used. In cases where wireless, lossy
            networks, or high-latency WANs are implemented, use TCP with a
            minimum timeout of 1 second (1,000 milliseconds). Extending timeouts
            allows TCP/IP to perform background retranmissions increasing
            probability of communication success.
            </para>
            <para>
            Data access efficiency is via reading the I/O unit in "banks" or
            those methods that allow you to read all or chunks of the I/O
            data all at once. One note, if caching is enabled (non-zero time),
            point reads are converted into bank operations. So you won't
            have to rewrite "point" oriented code. If you disable caching,
            you should perform bank reads to reduce network traffic and
            reduce I/O access latencies that will accumulate with each I/O
            read operation.
            </para>
            <para>
            The SDK is written with optimization biased for Ethernet connected
            SNAP-PAC hardware. Serial devices have significantly higher
            communication latencies (compounded with lower and lower baud rates).
            Serial implementation may need to make hardware configuration
            consideration to positively affect communication throughput. 
            </para>
            <para>
            While this library is built with the 3.5 .Net Framework, Windows 8.1
            Pro users do not have to install the .Net 3.5 Framework to use this
            SDK.
            </para>
            <para>
            This SDK supports Windows Windows 7 Professional (32- or 64-bit
            versions) and Windows 8.1 Pro (32- or 64-bit versions). Only x86
            (32-bit) and AMD64 (64-bit) architectures are tested.
            </para>
            <para>
            This SDK should work with much more recent Atom processors. But
            some of these architectures are very resource inhibited and thus
            may encounter some hindering (unforeseen) limitations.
            </para>
            <para>
            Please see Readme_WhenErrorsOccur() to handle unexpected issues.
            When a method ever returns a negative result, close the object.
            This library will log the fault in the Application Event viewer.
            </para>
            <para>
            Please see Readme_AboutIOModules() to have a brief introduction to
            the types of SNAP IO modules. Knowing what modules you have will allow
            you to quickly know how to read and write to them.
            </para>
            <para>
            IPv6 connectivity options offered when users are accessing one of
            our devices over a network through some kind of IPv6 to IPv4 router.
            In the near future, the allocation of IPv4 addresses will likely
            become more and more expensive pressing remote IO users to select
            IPv6 addresses (due to lower costs). This library provides this
            connection alternative.
            </para>
            <para>
            Typically, the OptoMMP device allows up to 16 TCP/IP connections
            simultaneously. UDP is different in that a single socket is used
            due to the connectionless nature. This interface will buffer several
            dozen message before the incoming queue is filled. Subsequent
            messages beyond the queue depth are dropped. In most applications,
            we recommend using as little TCP sessions as possible or minimal
            filling of the UDP queue. This is to maintain a responsive system.
            </para>
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i32cCacheChunk">
            <summary>
            The Amount The Cache List Automatically Grows
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i32MMPMaxBytesPerTransfer">
            <summary>
            Maximum Data Bytes Per MMP Transfer (Read or Write)
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i32cBasicBufferSize">
            <summary>
            Size of the buffers allowed.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i32cOptoMmpHeaderSize">
            <summary>
            Size of the OptoMMP header.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i32Rack64Points">
            <summary>
            64 point model
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i32Rack512Points">
            <summary>
            512 point model
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i32Rack4096Points">
            <summary>
            4096 point model
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i32Rack16Modules">
            <summary>
            maximum modules per rack
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i32cDevicesPerSerialNetwork">
            <summary>
            Max devices per serial network.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPCommandStatus">
            <summary>
            Command write location.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPFOrCStatus">
            <summary>
            OptoMMP Address of the Temperature Reporting Value
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPWatchdogTimeMs">
            <summary>
            OptoMMP Address of the Communication Watchdog Timeout Setting
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPDateTimeAddress">
            <summary>
            OptoMMP Address for the Date Time
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPScannerFlagRead">
            <summary>
            Location where to read the scanner flags.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPScannerFlagWrite">
            <summary>
            Write scanner flags to device.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPSerialPortConfig">
            <summary>
            OptoMMP Address for the Serial Module Configuration Area
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPSerialPortEom">
            <summary>
            OptoMMP Address for the Serial Module End-Of-Message Configuration
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPSerialPortMode">
            <summary>
            OptoMMP Address for the Serial Port Mode Configuration
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPSsiModuleBase">
            <summary>
            Base OptoMMP address of the SSI Module Configuration
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i32cMMPSsiModuleLength">
            <summary>
            Length of the SSI module's configuration area.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPStreamingAddress">
            <summary>
            Streaming address, base of the streaming configuration
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i32cStreamingMMPAddressLength">
            <summary>
            Length of the streaming area, used for reading the region.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPScratchpadBitsRead">
            <summary>
            Base MMP address for scratchpad bit read.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i32cMMPScratchpadBitsReadLength">
            <summary>
            Length of scratchpad bit read area.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPScratchpadBitsWrite">
            <summary>
            Address of scratchpad bit write (momo).
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i32cMMPScratchpadBitsWriteLength">
            <summary>
            Length of scratchpad bit write area.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPF32Scratchpad0">
            <summary>
            Float Scratchpads, Original Block
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPF32Scratchpad1">
            <summary>
            Float Scratchpads, Extended Block
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i32cMaxF32Elements">
            <summary>
            Maximum Number of 32-bit Integer Elements
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i32cF32ScratchpadSplit">
            <summary>
            Index Where the Scratchpads Split at (Between Primary and Extended Blocks)
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPI32Scratchpad0">
            <summary>
            Base OptoMMP Address of the Original 1024 Element Scratchpad Block
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPI32Scratchpad1">
            <summary>
            Base OptoMMP Address of the First Extended 9216 Element Scratchpad Block
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i32cMaxI32Elements">
            <summary>
            Maximum Number of 32-bit Integer Elements
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i32cI32ScratchpadSplit">
            <summary>
            Index Where the Scratchpads Split at (Between Primary and Extended Blocks)
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPI64Scratchpad0">
            <summary>
            Base Address for the 64-bit Integer Scratchpads
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i32cMaxI64Elements">
            <summary>
            Number of 64-bit Integer Scratchpads
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPStringAddressBase">
            <summary>
            Base address of the string scratchpads.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i32cMaxStringElements">
            <summary>
            String scratchpads are 64 elements long.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPLowDensityDigitalBankArea64">
            <summary>
            Base MMP adress for the packed "low-density" I/O states (from the Streaming, Read-Only Area)
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i32cMMPLowDensityDigitalBankLength">
            <summary>
            Length of the area of 32-bit values.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPOnLatchBase64">
            <summary>
            Opto MMP Address for On Latches
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPOffLatchBase64">
            <summary>
            Opto MMP Address for Off Latches
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPReadCounterBase64">
            <summary>
            Opto MMP Address to read counters.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPReadClearCounterBase64">
            <summary>
            Opto MMP Address to read and clear counters.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPDigitalBankWrite64">
            <summary>
            MMP Address for the digital bank write area.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPDigitalActivateCounters64">
            <summary>
            MMP address of the counter activation/deactivation status.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPCounterStatus">
            <summary>
            Base address of the counter status.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPAnalogBankStates64">
            <summary>
            Base of the old 64-point analog bank area.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i32cMMPAnalogBankStatesLength64">
            <summary>
            Length, in bytes of the analog bank area.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPAnalogPointRead">
            <summary>
            Analog point read.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPAnalogReadClearMin">
            <summary>
            Analog read, clear minimum.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPAnalogReadClearMax">
            <summary>
            Analog read, clear maximum.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPAnalogBankWriteEu64">
            <summary>
            MMP Address of the 64-point analog engineering units bank write.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPAnalogBankWriteCount64">
            <summary>
            MMP address of the 64-point analog counts write.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPAnalogPointWrite64">
            <summary>
            Analog point write area.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPPointConfiguration64">
            <summary>
            Opto MMP Address of the 64-Point digital configuration.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPAnalogPointWrite">
            <summary>
            Base address for a 64-point model's point write area
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPHighDensityDigitalStateLatch">
            <summary>
            High-Density digital state latch area.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPHighDensityDigitalReadClear">
            <summary>
            Opto MMP location for reading and clearing high-density latches.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPHighDensityDigitalCounters">
            <summary>
            Opto MMP location for the high-density digital counters.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPHighDensityDigitalCountersClear">
            <summary>
            Opto MMP location to read and clear high-density digital counters.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPHighDensityWrite">
            <summary>
            High-Density Digital Write address
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPAnalogEus512">
            <summary>
            Opto MMP Address for the 512-Point Analog States (and Digital Counters).
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cAnalogPointWriteEu512">
            <summary>
            Opto MMP Address for Writing Individual Analog Points.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPPointConfiguration4096">
            <summary>
            Point configuration address for the 4,096 point bank.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMMPAnalogPointWrite4096">
            <summary>
            Point write address for the 4,096 point rack.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMmpPidQuantityAddress">
            <summary>
            Location where to read the quantity of PID's in a brain
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMmpPid1Base">
            <summary>
            PID Parameter Block 1 Base Address
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i32cMmpPid1BlockSize">
            <summary>
            PID Parameter Block 1 Size
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMmpPid2Base">
            <summary>
            PID Parameters Block 2 Base Address
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i32cMmpPid2BlockSize">
            <summary>
            PID Parameters Block 2 Size
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i32cPidsReadPerAttempt">
            <summary>
            The Number of PIDs Read Per Attempt
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i32cMaximumPulseObjects">
            <summary>
            SNAP-PAC has 512 pulse objects available.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMmpPulseConfigure">
            <summary>
            OptoMMP Addresses for Pulse Areas
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMmpPulseConfigureLength">
            <summary>
            Confiugration length.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMmpPulseMustStartOnBankArea">
            <summary>
            Base address for the must start-on area.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMmpDigital64PointArea">
            <summary>
            Base address for the digital 64 point area.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMmpCustomAddresses">
            <summary>
            OptoMMP base address for the OptoMMP custom address area.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMmpCustomData">
            <summary>
            OptoMMP base address for the OptoMMP custom data area.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i32cMmpCustomLength">
            <summary>
            Size of the area in 32-bit addresses, same for address or data.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i32cMmpCustomChunk">
            <summary>
            Chunk size we can write custom addresses or custom data (in 32-bit entities).
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i32cMinimumTimeoutMs">
            <summary>
            Minimum permissible timeout.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cMmpEnableSbCommunicationBlinkCode">
            <summary>
            OptoMMP address for SNAP-PAC-SB communication status indication enable/disable.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cExpandedAnalogPointReadArea">
            <summary>
            Analog Expanded Point Read Area.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64cExpandedanalogPointReadClear">
            <summary>
            Analog Expanded Point Read/Clear Area.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.objLock">
            <summary>
            Lock object.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.oUdp">
            <summary>
            UDP/IP Client Object
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.oTcp">
            <summary>
            TCP/IP Client Object
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i32OptoMmpSequenceId">
            <summary>
            OptoMMP Sequence ID (or Transaction Label in 1465)
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i32aryTimeoutMs">
            <summary>
            Communication timeout in milliseconds. Array is always set to the maximum configuration of the network. 
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i32aryReadDataFreshnessMs">
            <summary>
            Cache Freshness in Milliseconds
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i32ConsecutiveTcpConnectFails">
            <summary>
            Number of Consecutive TCP/IP Reconnection Fails
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i32aryCacheSize">
            <summary>
            The Current Cache Size
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.ary2dCache">
            <summary>
            MMP Read Data Cache Array
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.aryCacheDictionary">
            <summary>
            Dictionary for a fast search of the prior MMP requests.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i32cInitialDataCacheFreshnessMs">
            <summary>
            Initial data cache freshness.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.sFaultMessage">
            <summary>
            String message when a fault occurs.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.bCommFault">
            <summary>
            Indicates if this is a device communication fault.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.bProtocolFault">
            <summary>
            Protocol fault indicator.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.bArgumentFault">
            <summary>
            Library argument error. This is typically a warning.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.byaryTx">
            <summary>
            Transmission buffer used to build the OptoMMP transmission message. Made an object member to minimize memory allocation.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i32DataRequestLength">
            <summary>
            Data request length.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.byaryRx">
            <summary>
            Receive buffer, after block methods are complete, only contains the OptoMMP data payload (if any)
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.sThisHostname">
            <summary>
            This host name.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i32ThisHostOptoMmpPort">
            <summary>
            This host's tcp or udp port.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.sAssembly">
            <summary>
            The entry assembly's ID
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.serialost">
            <summary>
            Internal serial object.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.byDeviceIndex">
            <summary>
            Current device index in use.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i32SerialBaudRate">
            <summary>
            Serial baud rate configured on the opening.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.bIsOpen">
            <summary>
            When true, object is open.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i32OptoMmpProtocolResultCode">
            <summary>
            Last OptoMMP protocol result code reported.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.i64LastTransactionTimeMs">
            <summary>
            Duration of the last messaging transaction. For methods that perform several
            transactions, this value only represents the last transaction.
            </summary>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.eThisConnection">
            <summary>
            Connection Enumerations
            </summary>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.Open(System.String,System.Int32,Opto22.OptoMMP3.OptoMMP.Connection,System.Int32,System.Boolean)">
            <summary>
            Opens An OptoMMP Object.
            The UDP/IP option is strongly recommended for single-segment networks.
            Use TCP/IP when communicating over wireless and wide-area-network connections. For Wide-Area-Networks, larger timeouts may be needed.
            If using TCP/IP, an internal reconnection backoff algorithm throttles how agressive reconnections will occur at.
            </summary>
            <param name="sHost">Hostname (DNS or "hosts") or IP Address in dot format.</param>
            <param name="i32Port">The UDP or TCP port, typically, 2001.</param>
            <param name="eType">Connection Type, use UDP for most systems, TCP when internet connectivity is involved.</param>
            <param name="i32InitialTimeoutMs">Initial timeout (ms) for messaging transactions. 1000 ms is typical.</param>
            <param name="bPowerUpClear">Set this to "true." True clears the "Powered Up" flag on the brain.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
            <code>
            Int32 i32Result = Mmp.Open("172.22.1.2", 2001, OptoMMP.Connection.UdpIp, 1000, true);
            </code>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.OpenSerialBinary(System.String,System.Int32)">
            <summary>
            Open a serial (binary) connection to a string of I/O units. The OptoMMP SDK uses only a Windows
            COM port. Your COM port may be an add-in card or a USB to Serial Converter (that emulates a COM port).
            </summary>
            <param name="sCommPort">Comm port string, a valid port such as COM1, COM3, or COM28.</param>
            <param name="i32BaudRate">Baud rate, once opened, cannot be changed.</param>
            <returns>0, okay, negative values are errors.</returns>
            <code>
            Int32 i32Result = Mmp.OpenSerialBinary("COM60", 115200);
            </code>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.InvalidateReadCache">
            <summary>
            When the object is open, invalidates the entire read data 
            cache for the selected device (addressed by bySerialAddress)
            </summary>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.Close">
            <summary>
            Close the OptoMMP device connection.
            </summary>
            <code>
            Mmp.Close();<br />
            </code>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.BlockReadRequest(System.Int64,System.Int32,System.Boolean)">
            <summary>
            Opto MMP Block Read Request.
            </summary>
            <param name="i64MmpAddress">Opto MMP address in 64-bit format.</param>
            <param name="i32RequestLength">Length of the request in bytes.</param>
            <param name="bCacheable">True, caches the data of this read.</param>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.InvalidateCacheEntry(System.Int64,System.Int32)">
            <summary>
            [INTERNAL] Invalidate a cache entry. Used when a specific write doesn't match the area the data is "read" from.
            For example when reading and writing scratchpad bits, they are different areas of the memory map. This
            allows the writing function to attempt to invalidate the cache that may have recently accessed the read
            area.
            </summary>
            <param name="i64MmpReadAddress">The OptoMMP address used to read the data.</param>
            <param name="i32RequestLength">Length of the area to invalidate.</param>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.BlockWriteRequest(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            [INTERNAL] OptoMMP Block Write Request
            </summary>
            <param name="i64MmpAddress">OptoMMP Address To Write too.</param>
            <param name="byaryData">Byte array to write in network-byte-order.</param>
            <param name="i32Offset">Starting offset in the byte array the data starts at.</param>
            <param name="i32DataLength">Length of the data to write.</param>
            <returns>0 for OK, -1 through -9 for connection faults, -10 and lower are MMP protocol faults.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WriteStatusCommand(Opto22.OptoMMP3.OptoMMP.StatusWriteCommand)">
            <summary>
            Writes a Status Command to Opto MMP Address 0xffff f038 0000
            (see Opto 22 Form 1465, Section "Status Area Write - Read/Write")
            Should a different command be needed that is not in the StatusWriteCommand
            enumeration, directly write the numeric value to 0xffff f038 0000.
            <para>
            When using enumerations ResetHardware or ResetToDefaults, the device will physically reboot.
            If you are using a TCPIP connection, the connection will be severed,
            close this session after this method returns. Depending on the network
            connection, the network link and device may not be available to
            reconnect for as much as 30 seconds.
            </para>
            <para>
            Using enumerations that cause the device to reboot may cause this error
            to appear in the Windows Application Event Queue.
            'Timeout, no data was received. Either the remote host didn't receive the request or a packet was dropped. Issuing a command to reset to defaults and reboot or reboot device may cause this message to occur.'
            This is expected behavior.
            </para>
            <para>
            Some commands like StoreToFlash and EraseFlash will take up to 5 seconds to complete. Update the timeout accordingly.
            </para>
            </summary>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
            <code>
            // erase the stored device configuration and reset device<br />
            Mmp.WriteStatusCommand(OptoMMP.StatusWriteCommand.ResetToDefaults);<br />
            </code>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WriteFOrCStatus(System.Boolean)">
            <summary>
            Force Brain to Report Temperature as Celsius or Fahrenheit
            <para>
            Temperature values should not be read within 1 to 3 seconds of this method. Reading too early may report the wrong temperature value.
            If you have an application that has to change temperature scale often or requires different temperature scale, do not constantly
            use this method due to update latency. Consider reading the temperature values in a constant setting
            and performing the conversions in your application.
            </para>
            </summary>
            <param name="bIsFahrenheit">True sets the brain to report Fahrenheit, False, Celsius.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
            <code>
            // set temperature mode to Celsius<br />
            i32Result = Mmp.WriteFOrCStatus(false);<br />
            </code>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadFOrCStatus(System.Boolean@)">
            <summary>
            Read the Temperature Reporting Status of the Brain
            </summary>
            <param name="bIsFahrenheit">An out value of true is Fahrenheit, false is Celsius</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
            <code>
            // read the temperature status<br />
            i32Result = Mmp.ReadFOrCStatus(out bIsFahrenheit);<br />
            </code>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WriteWatchdogTime(System.Int32)">
            <summary>
            Set the Communication Watchdog Timeout of the IO unit.
            <para>
            The only method an application may detect a timeout (or possibly the I/O unit resetting) is to configure a 4-channel
            digital output and turn it on. Should it go off, this would indicate a communication watchdog event or a power-cycling
            reset event.
            </para>
            </summary>
            <param name="i32WatchdogTimeMs">Time in milliseconds to set the timeout value.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
            <code>
            // write the watchdog time<br />
            i32Result = Mmp.WriteWatchdogTime(5000);<br />
            </code>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadWatchdogTime(System.Int32@)">
            <summary>
            Read the Device's Communication Watchdog Timeout
            </summary>
            <param name="i32WatchdogTimeMs">[out] The timeout currently set at the IO unit. 0 is disabled.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
            <code>
            // read watchdog time<br />
            i32Result = Mmp.ReadWatchdogTime(out i32WatchdogTimeMs);<br />
            </code>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadDateTime(System.String@)">
            <summary>
            Read the Date and Time of the I/O Unit
            </summary>
            <param name="sDateTime">Date Time String from the I/O Unit</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
            <code>
            // read date time<br />
            i32Result = Mmp.ReadDateTime(out sDateTime);<br />
            </code>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WriteDateTime(System.String)">
            <summary>
            Write the Date-Time String to the IO Unit. 
            <para>The string format must be in this form, 'YYYY-MM-DD HH:MM:SS.00'.</para>
            </summary>
            <param name="sDateTime">String with the date time to set.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
            <code>
            String sForceTime = "2009-12-08 12:01:01.00";<br />
            i32Result = Mmp.WriteDateTime(sForceTime);<br />
            </code>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WriteLocalDateTime">
            <summary>
            Write Local Date-Time To The IO Unit. 
            <para>The PC's local date-time will be written to the I/O unit.</para>
            </summary>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
            <code>
            // write the local date time to device<br />
            i32Result = Mmp.WriteLocalDateTime();<br />
            </code>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadScannerFlags(System.Int32@)">
            <summary>
            Read the scanner flags of the control engine.
            </summary>
            <param name="i32ScannerFlags">Out parameter when the return value is okay. Bit compressed value of the scanner flags.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
            <code>
            i32Result = Mmp.ReadScannerFlags(out i32ScannerFlags);<br />
            </code>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WriteScannerFlags(System.Int32)">
            <summary>
            Write the scanner flags to the OptoMMP device.
            <para>These parameters must be stored to flash. The device should also be rebooted for the flags to take effect.</para>
            </summary>
            <param name="i32ScannerFlags">Bit packed array to write to location.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
            <code>
            i32Result = Mmp.WriteScannerFlags(0x0007);<br />
            </code>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadSerialModuleConfiguration(System.Int32,System.Int32@,System.Int32@,Opto22.OptoMMP3.OptoMMP.SerialParity@,System.Byte@,System.Byte@,System.Boolean@,System.Boolean@,System.Int32@,System.Boolean@)">
            <summary>
            Read the Serial (Module) Port Configuration. Only for Module based Serial Ports. Only supported on Ethernet based brains and controllers.
            </summary>
            <para>
            In assembly of 3.0 or later, i32Eom and b4WireMode will correctly report.
            </para>
            <param name="i32PortNumber">Serial port number to read, values 0 through 31. See GetSerialOrSsiPortIndexFromModuleAndChannel().</param>
            <param name="i32TcpPort">TCP/IP Service port this serial port is associated too.</param>
            <param name="i32BaudRate">Baud rate of the serial port.</param>
            <param name="eParity">Parity enumeration the port.</param>
            <param name="byDataBits">Number of Data Bits.</param>
            <param name="byStopBits">Number of Stop Bits.</param>
            <param name="bHardwareFlowControl">Hardware Flow Control.</param>
            <param name="bTestMessage">Powerup Test Message.</param>
            <param name="i32Eom">32-bit Value of End-Of-Message.</param>
            <param name="b4WireMode">Two or Four-Wire Mode (for 485/422 serial modules).</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
            <code>
            i32Result = Mmp2.ReadSerialModuleConfiguration(OptoMMP.GetSerialOrSsiPortIndexFromModuleAndChannel(15,1), <br />
            	out i32TcpPort, out i32BaudRate, out eParity,<br />
            	out byDataBits, out byStopBits, out bHardwareFlowcontrol, out bTestMessage,<br />
            	out i32Eom, out b4WireMode);<br />
            if (i32Result &lt; 0)<br />
            {<br />
            	Console.WriteLine("ReadSerialModuleConfiguration failed result {0}", i32Result);<br />
            	exit;<br />
            }<br />
            <br />
            String sOutput = "Port Number " + i32SerialPortIndex.ToString() + "\n" +<br />
            	"TcpPort " + i32TcpPort.ToString() + "\n" +<br />
            	"BaudRate " + i32BaudRate.ToString() + "\n" +<br />
            	"Parity " + eParity.ToString() + "\n" +<br />
            	"Data Bits " + byDataBits.ToString() + "\n" +<br />
            	"Stop Bits " + byStopBits.ToString() + "\n" +<br />
            	"Hardware Flow Control " + bHardwareFlowcontrol.ToString() + "\n" +<br />
            	"Test Message " + bTestMessage.ToString() + "\n" +<br />
            	"EOM 0x" + i32Eom.ToString("X08") + "\n" +<br />
            	"4-wire " + b4WireMode.ToString() + "\n";<br />
            Console.WriteLine(sOutput);<br />
            </code>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WriteSerialModuleConfiguration(System.Int32,System.Int32,System.Int32,Opto22.OptoMMP3.OptoMMP.SerialParity,System.Byte,System.Byte,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Write the Serial Port Configuration. Only for Module based Serial Ports. Only supported on Ethernet based brains and controllers.
            </summary>
            <param name="i32PortNumber">Serial port number to write too, values 0 through 31. See GetSerialOrSsiPortIndexFromModuleAndChannel().</param>
            <param name="i32TcpPort">TCP/IP Service port this serial port is associated too. This is a read-only parameter at the I/O unit.</param>
            <param name="i32BaudRate">Baud rate of the serial port.</param>
            <param name="eParity">Parity enumeration the port.</param>
            <param name="byDataBits">Number of Data Bits.</param>
            <param name="byStopBits">Number of Stop Bits.</param>
            <param name="bHardwareFlowControl">Hardware Flow Control.</param>
            <param name="bTestMessage">Powerup Test Message.</param>
            <param name="i32Eom">32-bit Value of End-Of-Message.</param>
            <param name="b4WireMode">Two or Four-Wire Mode (for 485/422 serial modules).</param>
            <code>
            Int32 i32PortNumber =  OptoMMP.GetSerialOrSsiPortIndexFromModuleAndChannel(15,1);<br />
            Int32 i32TcpPort = 22530;<br />
            Int32 i32BaudRate = 115200;<br />
            OptoMMP.SerialParity eParity = OptoMMP.SerialParity.None;<br />
            Byte byDataBits = 8;<br />
            Byte byStopBits = 1;<br />
            Boolean bHardwareFlowcontrol = true;<br />
            Boolean bTestMessage = false;<br />
            Int32 i32Eom = 0x01020304;<br />
            Boolean b4WireMode = true;<br />
            <br />
            i32Result = Mmp2.WriteSerialModuleConfiguration(i32PortNumber, i32TcpPort, i32BaudRate, eParity,<br />
            	byDataBits, byStopBits, bHardwareFlowcontrol, bTestMessage,<br />
            	i32Eom, b4WireMode);<br />
            </code>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadSsiModuleConfiguration(System.Int32,System.Int32@,System.Single@,System.Single@,System.Int32@,System.Int32@,System.Int32@,System.Boolean@,Opto22.OptoMMP3.OptoMMP.eDataCode@,System.Boolean@)">
            <summary>
            Read the SSI module configuration
            <para>
            This function requires SNAP-PAC firmware R8.5C or later.
            </para>
            </summary>
            <param name="i32PortNumber">The SSI module port number, values range from 0 to 31. See GetSerialOrSsiPortIndexFromModuleAndChannel().</param>
            <param name="i32FrameSize">Length of the entire data frame in bits.</param>
            <param name="f32ClockSpeedkHz">Frequency of the transducer (in kHz).</param>
            <param name="f32InterFrameTimeUs">Time between data frames (in microseconds).</param>
            <param name="i32MsbOffset">Location of the data MSB in the data frame. Starts from zero.</param>
            <param name="i32DataBits">Location of the data bit in the frame. Starts from clock zero.</param>
            <param name="i32ErrorBitOffset">Location of the error bit in the frame. Starts from clock zero.</param>
            <param name="bErrorBitLowIsError">Active status of the error bit.</param>
            <param name="eCoding">Encoding of the transducer.</param>
            <param name="bEnabled">Enables the brain to scan the SNAP-SCM-SSI module.</param>
            <returns>-1 for any error, check extended error status.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WriteSsiModuleConfiguration(System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Boolean,Opto22.OptoMMP3.OptoMMP.eDataCode,System.Boolean)">
            <summary>
            Writes the SSI Module configuration
            <para>
            This function requires SNAP-PAC firmware R8.5C or later.
            </para>
            </summary>
            <param name="i32PortNumber">The SSI module port number, values range from 0 to 31. See GetSerialOrSsiPortIndexFromModuleAndChannel().</param>
            <param name="i32FrameSize">Length of the entire data frame in bits.</param>
            <param name="f32ClockSpeedkHz">Frequency of the transducer (in kHz).</param>
            <param name="f32InterFrameTimeUs">Time between data frames (in microseconds).</param>
            <param name="i32MsbOffset">Location of the data MSB in the data frame. Starts from zero.</param>
            <param name="i32DataBits">Location of the data bit in the frame. Starts from clock zero.</param>
            <param name="i32ErrorBitOffset">Location of the error bit in the frame. Starts from clock zero.</param>
            <param name="bErrorBitLowIsError">Active status of the error bit.</param>
            <param name="eCoding">Encoding of the transducer.</param>
            <param name="bEnabled">Enables the brain to scan the SNAP-SCM-SSI module.</param>
            <returns>-1 for any error, check extended error status.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WriteBrainStreamingConfiguration(System.Int32,System.Int32,System.String[],System.UInt32,System.Int32)">
            <summary>
            Configure the brain streaming functionality.
            <para>
            Once successfully using this method, you must use EnableBrainStreaming() to enable streaming.
            This method does not automatically enable streaming>
            </para>
            <para>
            This function will disable streaming if it is enabled.
            </para>
            <para>
            This function disables mirroring. If you want mirroring, use PAC Manager to configure the brain instead.
            </para>
            </summary>
            <param name="i32IntervalMs">Interval in milliseconds to stream.</param>
            <param name="i32UdpPortDestination">UDP Client port to use.</param>
            <param name="saryIpAddresses">Array of IP addresses (in dot format) to stream too. Ensure the IP
            Addresses are packed from low to high indexes. When the device enounters a zero IP address,
            it will stop transmitting to any more IP addresses.</param>
            <param name="u32OptoMMPAddress">If not default, the OptoMMP address to use.</param>
            <param name="i32LengthOfStream">Length of the non-default OptoMMP area to use.</param>
            <returns>0 for successful, negative for error, check with LogErrorInformation().</returns>
            <code>
            Int32 i32IntervalMs = 500;<br />
            Int32 i32MyPcUdpPortReceivePort = 5001;<br />
            String[] saryIpAddresses = {sMyPcIpAddress};<br />
            Int64 i64OptoMMPAddress = 0;<br />
            Int32 i32LengthOfStream = 0;<br />
            <br />
            i32Result = Mmp.WriteBrainStreamingConfiguration(i32IntervalMs, i32MyPcUdpPortReceivePort, saryIpAddresses, i64OptoMMPAddress, i32LengthOfStream);<br />
            if (i32Result &lt; 0)<br />
            {<br />
            	Console.WriteLine("Configuring stream on device failed");<br />
            }<br />
            </code>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.EnableBrainStreaming(System.Boolean)">
            <summary>
            Controls the enable/disable functionality of brain streaming. Functionality only exists
            on Ethernet based I/O units.
            <para>
            This method didn't properly update the stream enabled flag.
            </para>
            </summary>
            <param name="bEnableStreaming">true to enable stream.</param>
            <returns>0 for successful, negative for error, check with LogErrorInformation().</returns>
            <code>
            // to enable<br />
            Mmp.EnableBrainStreaming(true);<br />
            <br />
            // to disable<br />
            Mmp.EnableBrainStreaming(true);<br />
            </code>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadBrainStreamingConfiguration(System.Boolean@,System.Int32@,System.Int32@,System.String[]@,System.UInt32@,System.Int32@)">
            <summary>
            Read the Brain Streaming configuration.
            </summary>
            <param name="bIsEnabled">When true, stream is enabled.</param>
            <param name="i32IntervalMs">Interval of stream in milliseconds, 0 is as fast as possible.</param>
            <param name="i32UdpPortDestination">Port to stream to, this is the PC or client's destination port.</param>
            <param name="saryIpAddresses">IP addresses configured in "dot" format.</param>
            <param name="u32OptoMMPAddress">MMP address if not default stream.</param>
            <param name="i32LengthOfStream">Length of the MMP stream (if not default).</param>
            <returns>0 for successful, negative for error, check with LogErrorInformation().</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ScratchpadBitsRead(System.UInt64@)">
            <summary>
            Read scratchpad bits as a 64-bit bitmask.
            <para>Bit 0 coorelates to bit 0 in the scratchpad bits.</para>
            <para>May returned a cached value depending on the data freshness value.</para>
            </summary>
            <param name="u64ScratchpadBitmask">Reference to a long, to store the 64 scratchpad bits.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ScratchpadBitsRead(System.Boolean[],System.Int32)">
            <summary>
            Read Scratchpad Bits Into A Boolean Array
            <para>May return a cached value.</para>
            </summary>
            <param name="baryScratchpad">Array of booleans to store values. Length must be at least i32StartIndex + 64.</param>
            <param name="i32StartIndex">Starting index to store values.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ScratchpadBitRead(System.Boolean@,System.Int32)">
            <summary>
            Read Scratchpad Bit
            <para>May return a cached value.</para>
            </summary>
            <param name="bState">When true the bit is on. False, the bit is off.</param>
            <param name="i32Index">Bit index, values 0 to 63.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ScratchpadBitsWrite(System.UInt64,System.UInt64)">
            <summary>
            Writes all 64 scratchpad bit states using turn-on and turn-off bitmasks.
            </summary>
            <param name="u64OnMask">The states to be forced on. Bit value of 1 turns on, 0 leaves state unaffected.</param>
            <param name="u64OffMask">The states to be forced off. Bit value of 1 turns off, 0 leaves state unaffected.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ScratchpadBitsWrite(System.Boolean[],System.Boolean[],System.Int32)">
            <summary>
            Writes All 64 Scratchpad Bitstates From "Must-On/Must-Off" (MoMo) Boolean Arrays
            </summary>
            <param name="baryOnStates">The states to be forced on. True turns on, false leaves state unaffected.</param>
            <param name="baryOffStates">The states to be forced off. True turns off, false leaves state unaffected.</param>
            <param name="i32StartIndex">Starting index to read states from.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ScratchpadBitWrite(System.Boolean,System.Int32)">
            <summary>
            Write Scratchpad Bit
            </summary>
            <param name="bState">Boolean.</param>
            <param name="i32Index">Bit index, values 0 to 63.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ScratchPadF32NumberofElements">
            <summary>
            Maximum number of elements in the Float Scratchpad Array.
            </summary>
            <returns>Returns the constant number of float elements.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ScratchpadFloatRead(System.Single[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Read a block of 32-bit floating point (Single) scratchpad registers.
            <para>Reads large blocks of scratchpads by breaking up large requests into multiple 256-element requests.</para>
            <para>Only access the contents of fary when this method is completed.</para>
            <para>If reading back a write that was recently performed, disable freshness by setting the time to zero before reading back the scratchpad.</para>
            <para>In .Net an Opto 22 "float" is a "Single" precision data type.</para>
            <para>SNAP-UP1-xxx family of controllers only support indices 0-1023.</para>
            <para>May returned a cached value depending on the data freshness.</para>
            </summary>
            <param name="fary">Float array to store the returned data.</param>
            <param name="i32StartFaryIndex">Starting index of the float array to store the data.</param>
            <param name="i32Length">Number of continuous floats to read.</param>
            <param name="i32StartScratchpadStartIndex">Starting index of the float scratchpads to read from.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ScratchpadFloatWrite(System.Single[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Write a block of float scratchpad registers.
            <para>In .Net an Opto 22 "32-bit float" is a "Single" precision data type.</para>
            <para>Not cachable.</para>
            <para>SNAP-UP1-xxx family of controllers only support indices 0-1023.</para>
            </summary>
            <param name="fary">Array of float values to write.</param>
            <param name="i32StartFaryIndex">Start index of the float aray.</param>
            <param name="i32Length">Number of float elements to write.</param>
            <param name="i32StartScratchpadStartIndex">Starting float scratchpad element to write too.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ScratchPadI32NumberofElements">
            <summary>
            Maximum number of elements in the 32-bit Integer Scratchpad Array.
            </summary>
            <returns>Returns the constant number of 32-bit Integer elements for a SNAP-PAC Ethernet brain/controller.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ScratchpadI32Read(System.Int32[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Read a block of 32-bit signed-integer scratchpad registers.
            <para>Reads large blocks of scratchpads by breaking up large requests into multiple 256-element requests.</para>
            <para>Only access the contents of i32ary when this method is completed.</para>
            <para>If reading back a write that was recently performed, disable freshness by setting the time to zero before reading back the scratchpad.</para>
            <para>SNAP-UP1-xxx family of controllers only support indices 0-1023.</para>
            <para>May returned a cached value depending on the data freshness.</para>
            </summary>
            <param name="i32ary">32-bit integer array to store the returned data.</param>
            <param name="i32StartIaryIndex">Starting index of the float array to store the data.</param>
            <param name="i32Length">Number of continuous floats to read.</param>
            <param name="i32StartScratchpadStartIndex">Starting index of the float scratchpads to read from.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ScratchpadI32Write(System.Int32[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Write a block of 32-bit signed-integer scratchpad registers.
            <para>Divides the writes of up to 256 elements to satisfy the transfer.</para>
            <para>Not cachable.</para>
            <para>SNAP-UP1-xxx family of controllers only support indices 0-1023.</para>
            </summary>
            <param name="i32ary">Array of 32-bit integer values to write.</param>
            <param name="i32StartIaryIndex">Start index of the 32-bit integer array.</param>
            <param name="i32Length">Number of float elements to write.</param>
            <param name="i32StartScratchpadStartIndex">Starting 32-bit integer scratchpad element to write.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ScratchPadI64NumberofElements">
            <summary>
            Maximum number of elements in the 64-bit Integer Scratchpad Array.
            </summary>
            <returns>Returns the constant number of 64-bit Integer elements.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ScratchpadI64Read(System.Int64[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Read the 64-bit signed-integer (Int64) scratchpad registers
            <para>Internally, this method reads 64-bit integers in 128 element blocks.</para>
            <para>May returned a cached value depending on the data freshness.</para>
            </summary>
            <param name="i64ary">Array to store read values.</param>
            <param name="i32StartIaryIndex">Starting index in i64ary to store values.</param>
            <param name="i32Length">Length of the read request.</param>
            <param name="i32StartScratchpadStartIndex">First element of the scratchpad array to start reading from.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ScratchpadI64Write(System.Int64[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Write a block of 64-bit signed integer scratchpad registers.
            <para>Writes longer than 128 elements are divided into 128 maximum element sized writes.</para>
            <para>Not cachable.</para>
            </summary>
            <param name="i64ary">Array of 64-bit integer values to write.</param>
            <param name="i32StartIaryIndex">Start index of the 64-bit integer array.</param>
            <param name="i32Length">Number of float elements to write.</param>
            <param name="i32StartScratchpadStartIndex">Starting 64-bit integer scratchpad element to write.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ScratchPadStringNumberofElements">
            <summary>
            Maximum number of elements in the String Scratchpad Array.
            </summary>
            <returns>Returns the constant number of String Scratchpad elements.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ScratchpadStringRead(System.String[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Read the string scratchpad registers.
            <para>Internally, this method reads strings in 8 string-element chunks.</para>
            <para>May returned a cached value depending on the data freshness.</para>
            <para>String scratchpads are intended for only ASCII based strings.</para>
            <para>A correction to this method was made on 10-14-2011. Problems arose with 9.x firmware or later
            and if less than 64 scratchpad strings were read.</para>
            </summary>
            <param name="strary">Array of strings to read.</param>
            <param name="i32StartStraryIndex">Starting index in string to store values.</param>
            <param name="i32Length">Length of the read request.</param>
            <param name="i32StartScratchpadStartIndex">First element of the scratchpad array to start reading from.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ScratchpadStringWrite(System.String[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Write a block of string scratchpad registers.
            <para>Writes longer than 4 elements are divided into 4-element chunks.</para>
            <para>String scratchpads are intended for only ASCII based strings.</para>
            </summary>
            <param name="strary">Array of strings to write.</param>
            <param name="i32StartStraryIndex">Start index of the string array.</param>
            <param name="i32Length">Number of strings elements to write.</param>
            <param name="i32StartScratchpadStartIndex">Starting string scratchpad element to write.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadDigitalStates64(System.Int64@)">
            <summary>
            Read digital states as a 64-bit Bitmask.
            <para>Bit 0 coorelates to the first module, first channel of the rack.</para>
            <para>Will report digital states, even when analog or serial modules are present.</para>
            <para>May returned a cached value depending on the data freshness.</para>
            <para>This method only works with the 64-point I/O unit properties.</para>
            <para>This member only reads the states of 4-channel digital modules.</para>
            </summary>
            <param name="i64DigitalStatesBitmask">Reference to a long, to store the 64 digital states read.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadDigitalStates64(System.UInt64@)">
            <summary>
            Read digital states as a 64-bit Bitmask as a UInt64
            <para>Bit 0 coorelates to the first module, first channel of the rack.</para>
            <para>Will report digital states, even when analog or serial modules are present.</para>
            <para>May returned a cached value depending on the data freshness.</para>
            <para>This method only works with the 64-point I/O unit properties.</para>
            <para>This member only reads the states of 4-channel digital modules.</para>
            </summary>
            <param name="u64DigitalStatesBitmask">Reference to a long, to store the 64 digital states read.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadDigitalStates64(System.Boolean[],System.Int32)">
            <summary>
            Read 64 Digital States Into A Boolean Array
            </summary>
            <param name="baryDigitalStates64">Array of booleans to store values. Length must be i32StartIndex + 64.</param>
            <param name="i32StartIndex">Starting index to store values.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadDigitalState64(System.Int32,System.Boolean@)">
            <summary>
            Read the individual digital state by specifying the point number.
            <para>May returned a cached value depending on the data freshness.</para>
            <para>This method only works with the 64-point I/O unit properties.</para>
            </summary>
            <param name="i32PointNumber">Point number, valid values range from 0 to 63.</param>
            <param name="bState">The state of the digital point, true is "on."</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadDigitalLatches64(System.Int64@,System.Int64@)">
            <summary>
            Read all On and Off Latch States of the 64 Point I/O Unit Rack at Bitmasks.
            <para>May return cached values.</para>
            <para>Does not return the latch state of high-density digital modules.</para>
            <para>This method only works with the 64-point I/O unit properties.</para>
            </summary>
            <param name="i64OnLatchBitMask">Bit packed mask of on-latches. Bit-0 coorelates to point 0.</param>
            <param name="i64OffLatchBitMask">Bit packed mask of off-latches. Bit-0 coorelates to point 0.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadDigitalLatches64(System.UInt64@,System.UInt64@)">
            <summary>
            Read all On and Off Latch States of the 64 Point I/O Unit Rack with Unsigned Bitmasks.
            <para>May return cached values.</para>
            <para>Does not return the latch state of high-density digital modules.</para>
            <para>This method only works with the 64-point I/O unit properties.</para>
            </summary>
            <param name="u64OnLatchBitMask">Bit packed mask of on-latches. Bit-0 coorelates to point 0.</param>
            <param name="u64OffLatchBitMask">Bit packed mask of off-latches. Bit-0 coorelates to point 0.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadDigitalLatches64(System.Boolean[],System.Boolean[],System.Int32)">
            <summary>
            Read all On and Off Latch States of the 64 Point I/O Unit Rack with Boolean arrays.
            <para>May return cached values.</para>
            <para>Does not return the latch state of high-density digital modules.</para>
            <para>This method only works with the 64-point I/O unit properties.</para>
            </summary>
            <param name="baryOnLatches">64 element Boolean array of on-latches.  Index 0 coorelates to point 0 when i32StartIndex == 0.</param>
            <param name="baryOffLatches">64 element Boolean array of off-latches. Index 0 coorelates to point 0 when i32StartIndex == 0.</param>
            <param name="i32StartIndex">Start index of the on-latch an off-latch arrays to store data.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadDigitalLatch64(System.Int32,System.Boolean@,System.Boolean@)">
            <summary>
            Read the Digital Latches Selected by a Point Number.
            <para>May return cached values.</para>
            <para>This method only works with the 64-point I/O unit properties.</para>
            </summary>
            <param name="i32PointNumber">Point number, range 0 to 63. 0 is point 0.</param>
            <param name="bOnLatch">On latch state.</param>
            <param name="bOffLatch">Off latch state.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadClearDigitalLatches64(System.Boolean,System.Int64@)">
            <summary>
            Read and clear digital latches in the 64-point area.
            <para>This method does not return cached values.</para>
            <para>This method only works with the 64-point I/O unit properties.</para>
            </summary>
            <param name="bReadAndClearLatches">True, method reads and clears "on" latch. When False, reads and clears "off" latch.</param>
            <param name="i64LatchBitmask">A Int64 to store the latch state. Bit 0 is channel 0.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadClearDigitalLatches64(System.Boolean,System.UInt64@)">
            <summary>
            Read and clear digital latches in the 64-point area, with a UInt64 latch bitmask.
            <para>This method does not return cached values.</para>
            <para>This method only works with the 64-point I/O unit properties.</para>
            </summary>
            <param name="bOnLatches">True, method reads and clears "on" latch. When False, reads and clears "off" latch.</param>
            <param name="u64LatchBitmask">A UInt64 to store the latch state. Bit 0 is channel 0.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadClearDigitalLatches64(System.Boolean,System.Boolean[],System.Int32)">
            <summary>
            Read and clear digital latches in the 64-point area, with a UInt64 latch bitmask.
            <para>This method does not return cached values.</para>
            <para>This method only works with the 64-point I/O unit properties.</para>
            </summary>
            <param name="bOnLatches">True, method reads and clears "on" latch. When False, reads and clears "off" latch.</param>
            <param name="baryLatches">A boolean array to store the latch states. Bit 0 is channel 0.</param>
            <param name="i32StartIndex">Start index of baryLatches to write latch states too.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadClearDigitalLatch64(System.Int32,System.Boolean,System.Boolean@)">
            <summary>
            Read and clear a digital latch.
            <para>This method does not return cached values.</para>
            <para>This method only works with the 64-point I/O unit properties.</para>
            </summary>
            <param name="i32PointNumber">Point number to read (0 through 63).</param>
            <param name="bOnLatch">True, method reads and clears "on" latch. When False, reads and clears "off" latch.</param>
            <param name="bLatchState">The state of the selected latch.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadOptionallyClearCounters64(System.Boolean,System.UInt32[],System.Int32)">
            <summary>
            Read and optionally clear all 64 counters.
            <para>This method does not return cached values.</para>
            <para>This method only works with the 64-point I/O unit properties.</para>
            <para>Reading and clearing counters may cause counts to be lost.</para>
            </summary>
            <param name="bClear">When true, clears the counters.</param>
            <param name="u32aryCounters">Storage for counter values.</param>
            <param name="i32StartIndex">Starting index in u32aryCounters to store data.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadOptionallyClearCounter64(System.Int32,System.Boolean,System.UInt32@)">
            <summary>
            Read and optionally clear a counter on the 64 point rack.
            <para>This method does not cache data.</para>
            <para>This method only works with the 64-point I/O unit properties.</para>
            <para>Reading and clearing counters may cause counts to be lost.</para>
            </summary>
            <param name="i32PointNumber">Point number in the 64-point IO unit model.</param>
            <param name="bClear">When true, clears the counter.</param>
            <param name="u32Counter">Storage for counter value.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WriteDigitalStates64(System.Int64)">
            <summary>
            Sets all of the 4-channel digital states in the 64-point rack.
            <para>The digital output must be configured before the output will turn on.</para>
            <para>This method only works with the 64-point I/O unit properties.</para>
            </summary>
            <param name="i64StateBitMask">64-bit bitmask of states, a bit value of 1 is on, 0 is off.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WriteDigitalStates64(System.Boolean[],System.Int32)">
            <summary>
            Write All 64 Digital States Using A Boolean Array.
            <para>
            The boolean array arguments must be at least i32StartIndex + 64 in length.
            </para>
            </summary>
            <param name="baryStates">Array of states, true is on, false is off.</param>
            <param name="i32StartIndex">Starting index of the array to begin using states.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WriteDigitalStatesMoMo64(System.Int64,System.Int64)">
            <summary>
            Writes All 64 Digital States From "Must-On/Must-Off" (MoMo) Bit Masks
            </summary>
            <param name="i64OnMask">The points to be forced on. Bit value of 1 turns on, 0 leaves point state unaffected.</param>
            <param name="i64OffMask">The points to be forced off. Bit value of 1 turns off, 0 leaves point state unaffected.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WriteDigitalStatesMoMo64(System.Boolean[],System.Boolean[],System.Int32)">
            <summary>
            Writes All 64 Digital States From "Must-On/Must-Off" (MoMo) Boolean Arrays
            </summary>
            <param name="baryOnStates">The points to be forced on. True turns on, false leaves point state unaffected.</param>
            <param name="baryOffStates">The points to be forced off. True turns off, false leaves point state unaffected.</param>
            <param name="i32StartIndex">Starting index to read states from.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WriteDigitalState64(System.Int32,System.Boolean)">
            <summary>
            Set a single state of a 4-channel digital output, 64-point rack.
            <para>This method does not cache data.</para>
            <para>The digital output must be configured before the output will turn on.</para>
            <para>This method only works with the 64-point I/O unit properties.</para>
            </summary>
            <param name="i32PointNumber">Digital point number to set, 0 through 63.</param>
            <param name="bOn">True, turns the output on, false turns the output off.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WriteDigitalEnableorDisableCounters64(System.Int64,System.Int64)">
            <summary>
            Enable or disable a bank of counters in the 64-point rack.
            <para>This method does not cache data.</para>
            <para>Warning. Enabling or disabling a counter at the same time has unpredictable results.</para>
            <para>This method only works with the 64-point I/O unit properties.</para>
            </summary>
            <param name="i64ActivateBitMask">Bitmask to enable a counter. A bit value of one enables a counter.</param>
            <param name="i64DeactivateBitMask">Bitmask to disable a counter. A bit value of one disables a counter.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WriteDigitalEnableorDisableCounters64(System.Boolean[],System.Boolean[],System.Int32)">
            <summary>
            Enable or Disable All 64 Digital Counters From Boolean Arrays
            </summary>
            <param name="baryActivate">Boolean array to activate counters, length must be at least i32StartIndex + 64.</param>
            <param name="baryDeactivate">Boolean array to deactivate counters, length must be at least i32StartIndex + 64.</param>
            <param name="i32StartIndex">Starting index to retrieve states from.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WriteDigitalEnableorDisableCounter64(System.Int32,System.Boolean)">
            <summary>
            Enable or disable a digital counter, 64-point rack.
            <para>This method does not cache data.</para>
            <para>This method only works with the 64-point I/O unit properties.</para>
            </summary>
            <param name="i32PointNumber">The point number, 0 through 63.</param>
            <param name="bActivate">When true, activates the counter.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadDigitalCountersStatus64(System.Int64@)">
            <summary>
            Reads All 64 Counter Status.
            <para>This may returned cached values.</para>
            </summary>
            <param name="i64ActivateBitMask">Status of the counters as a 64-bit mask.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadDigitalCountersStatus64(System.Boolean[],System.Int32)">
            <summary>
            Read All 64 Counter Status To A Boolean Array.
            </summary>
            <param name="baryActive">States of the counters, true is active counter. Array must be at least i32StartIndex + 64 in length.</param>
            <param name="i32StartIndex">Starting index to store values.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadDigitalCounterStatus64(System.Int32,System.Boolean@)">
            <summary>
            Read a Counter Status in the 64 Point IO Unit Memory Map.
            <para>This may returned cached values.</para>
            </summary>
            <param name="i32PointNumber">Point number to read, values 0 through 63.</param>
            <param name="bCounterStatus">The counter's status as a boolean.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadAnalogStates64(System.Single[],System.Int32)">
            <summary>
            Read all low-density (64-point) Analog Input and Output States.
            <para>May return cached values.</para>
            <para>In assembly version 1.1.2.0, a fix was made that if fary wasn't exactly 64, a -1 would be returned.</para>
            </summary>
            <param name="f32aryData">Single array to store the requested data. Must be preinitialized.</param>
            <param name="i32StartingIndex">Starting index to store this data.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadAnalogState64(System.Int32,System.Single@)">
            <summary>
            Read an analog state via a point number.
            <para>If Freshness is set to a non zero value, this method may returned a cached value.</para>
            </summary>
            <param name="i32PointNumber">Point number requested, range 0 to 63.</param>
            <param name="f32AnalogValue">Current value of the analog input or output.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadOptionallyClearAnalogMaxMin64(System.Int32,System.Boolean,System.Single@,System.Single@)">
            <summary>
            Read and clear analog maximum and minimum value of a point on a 64-point rack.
            </summary>
            <param name="i32PointNumber">Point number (0 through 63)</param>
            <param name="bClear">When true, resets the value after being read.</param>
            <param name="fMaximum">Maximum value read.</param>
            <param name="fMinimum">Minimum value read.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WriteAnalogStates64(System.Single[],System.Boolean,System.Int32)">
            <summary>
            Set analog outputs in engineering units or counts as a 64-point bank write.
            </summary>
            <param name="f32aryValues">Array storing values to write. Must contain at least i32StartIndex + 64 elements in length.</param>
            <param name="bEngineeringUnits">When true writes engineering units. False writes counts (typically 0 to 4095).</param>
            <param name="i32StartIndex">Starting index in the array to write values from.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WriteAnalogState64(System.Int32,Opto22.OptoMMP3.OptoMMP.AnalogWriteOptions,System.Single)">
            <summary>
            Sets a Single Analog State in Engineering Units, Counts or TPO in the 64-Point IO Unit Memory Map.
            <para>This method does not cache values.</para>
            </summary>
            <param name="i32PointNumber">The point number to write, 0 to 63.</param>
            <param name="eOption">The enumeration of the value option to be written.</param>
            <param name="fWriteValue">The value to write.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WriteDigitalPointConfiguration64(System.Int32,System.Boolean,Opto22.OptoMMP3.OptoMMP.eDigitalFeature,System.Boolean,System.Boolean,System.String)">
            <summary>
            Write the digital point configuration.
            </summary>
            <param name="i32PointNumber">Point Number 0 to 63.</param>
            <param name="bOutput">For digital outputs, set true.</param>
            <param name="eFeature">Digital Feature To Set. If no feature, select None.</param>
            <param name="bEnableWatchdog">Enable the communication watchdog.</param>
            <param name="bWatchdogValue">The state when the communication watchdog trigges, true is "on".</param>
            <param name="sPointName">Point name. Up to 15 characters in length. Additional length is truncated.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
            <code>
            // configure a digital point as input, with no digital features with a point name of "diPoint_00_00".<br />
            i32Result = Mmp.WriteDigitalPointConfiguration64(OptoMMP.GetPointNumberFor64(0, 0), false, OptoMMP.eDigitalFeature.None, false, false, "diPoint_00_00");<br />
            </code>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadDigitalPointConfiguration64(System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Boolean@,System.Boolean@,System.String@)">
            <summary>
            Read the Digital Point Configuration
            </summary>
            <param name="i32PointNumber">Point number, 0 to 63.</param>
            <param name="i32ModuleType">Module installed in this location. See form 1465 for additional information.</param>
            <param name="i32PointType">Point configured in this location.</param>
            <param name="i32Feature">Feature enabled (if any).</param>
            <param name="bWatchdogEnabled">Watchdog enabled state.</param>
            <param name="bWatchdogValue">Watchdog trigger state.</param>
            <param name="sPointName">Point name. 15 characters maximum.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WritePointConfiguration64(System.Int32,System.Int32)">
            <summary>
            Write/Modify Analog Point configuration or Digital Feature in 64 Point Area.
            <para>
            Sets only the point area. This is useful for setting just the point types, like when reading
            linearized thermocouples (scaling not required), an alternate input range on an analog input,
            or setting a 4-channel digital point as an input or output (no features needed).
            </para>
            </summary>
            <param name="i32PointNumber">Point Number, 0 to 63.</param>
            <param name="i32PointType">The point type.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WriteAnalogPointConfiguration64(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Single,System.String)">
            <summary>
            Write Analog Point configuration in 64 Point Area.
            <para>
            configures all the basic analog point configuration values.
            </para>
            </summary>
            <param name="i32PointNumber">Point Number, 0 to 63.</param>
            <param name="i32PointType">The point type.</param>
            <param name="f32HighScale">Upper Scale Value (when input is 100%).</param>
            <param name="f32LowScale">Lower Scale Value (when input is either 0% [unipolar] or -100% [bipolar]).</param>
            <param name="f32Offset">Offset.</param>
            <param name="f32Gain">Gain.</param>
            <param name="f32FilterWeight">Filter Weight (0.0 disables or positive values).</param>
            <param name="bEnableWatchdog">Enable analog communication watchdog.</param>
            <param name="f32WatchdogValue">The value to force whhen communication watchdog occurs.</param>
            <param name="sPointName">Point name, 15 characters maximum, additional length is truncated.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadAnalogPointConfiguration64(System.Int32,System.Int32@,System.Int32@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Boolean@,System.Single@,System.String@)">
            <summary>
            Read Analog Point Configuration in the 64-Point Area.
            <para>This method may return a cached value.</para>
            </summary>
            <param name="i32PointNumber">Analog Point Number, 0 to 63.</param>
            <param name="i32ModuleType">Module type.</param>
            <param name="i32PointType">Point type.</param>
            <param name="f32HighScale">100% high-scale value.</param>
            <param name="f32LowScale">0% (unipolar) or -100% (bipolar) low-scale value.</param>
            <param name="f32Offset">Calibration offset.</param>
            <param name="f32Gain">Calibration gain.</param>
            <param name="f32FilterWeight">Filter weight.</param>
            <param name="bEnableWatchdog">Watchdog enabled.</param>
            <param name="f32WatchdogValue">Watchdog value.</param>
            <param name="sPointName">Point name.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WriteAnalogLoadCellConfiguration64(System.Int32,System.UInt32,System.UInt32)">
            <summary>
            Write analog load cell configuration in 64 Point Area.
            <para>
            Configures the analog load cell's parameters (fast-settle and filter weight).
            </para>
            <para>
            While this is a configuration function, the data lies within the analog point write area (kind of unusual).
            </para>
            </summary>
            <param name="i32PointNumber">The 64-point rack's number, from 0 to 63.</param>
            <param name="u32FastSettle">The fast settle parameter, see form 1465 for values (this value is not checked by this library).</param>
            <param name="u32FilterWeight">The filter weight setting, see form 1465 for values (value is not check by this library).</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadAnalogLoadCellConfiguration64(System.Int32,System.UInt32@,System.UInt32@)">
            <summary>
            Read analog load cell configuration in the analog 64 point area (one point at a time).
            <para>
            Reads the analog load cell's parameters (fast-settle and filter weight).
            </para>
            <para>
            While this is a configuration function, the data lies within the analog point write area (kind of unusual).
            </para>
            </summary>
            <param name="i32PointNumber">The 64-point rack's number, from 0 to 63.</param>
            <param name="u32FastSettle">The fast settle parameter, see form 1465 for values.</param>
            <param name="u32FilterWeight">The filter weight setting, see form 1465 for values.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadPointName64(System.Int32,System.String@)">
            <summary>
            Read the Analog or Digital Point Name, using the 64-point memory model. SNAP-PAC and Legacy Ethernet based I/O units that
            support a point name.
            </summary>
            <param name="i32PointNumber">Point number to retrieve the point name from.</param>
            <param name="sPointName">Point name to store the point name retrieved.</param>
            <returns>0 when successful, -1 for error. Note, you may read a blank string "" if the point is not initialized on the I/O unit.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WritePointName64(System.Int32,System.String)">
            <summary>
            Write the Analog or Digital Point Name, using the 64-point memory model. SNAP-PAC and Legacy Ethernet based I/O units that
            support a point name.
            </summary>
            <param name="i32PointNumber">Point number to write the point name to. Values 0 through 63 inclusive, are valid.</param>
            <param name="sPointName">Point name to write, 15 characters maximum. Name will be truncated if longer.</param>
            <returns>0 when successful, -1 for errort.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WriteDigitalPointConfiguration4096(System.Int32,System.Boolean,Opto22.OptoMMP3.OptoMMP.eDigitalFeature,System.Boolean,System.Boolean,System.String)">
            <summary>
            Write the digital point configuration (4096 points).
            </summary>
            <param name="i32PointNumber">Point Number 0 to 4095.</param>
            <param name="bOutput">For digital outputs, set true.</param>
            <param name="eFeature">Digital Feature To Set. If no feature, select None.</param>
            <param name="bEnableWatchdog">Enable the communication watchdog.</param>
            <param name="bWatchdogValue">The state when the communication watchdog trigges, true is "on".</param>
            <param name="sPointName">Point name. Up to 50 characters in length. Additional length is truncated.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadDigitalPointConfiguration4096(System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Boolean@,System.Boolean@,System.String@)">
            <summary>
            Read the Digital Point Configuration (4096 points).
            </summary>
            <param name="i32PointNumber">Point number, 0 to 4095.</param>
            <param name="i32ModuleType">Module installed in this location. See form 1465 for additional information.</param>
            <param name="i32PointType">Point configured in this location.</param>
            <param name="i32Feature">Feature enabled (if any).</param>
            <param name="bWatchdogEnabled">Watchdog enabled state.</param>
            <param name="bWatchdogValue">Watchdog trigger state.</param>
            <param name="sPointName">Point name. 50 characters maximum.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadHighDensityDigitalStates(System.Boolean[],System.Int32)">
            <summary>
            Read All 512 High-Density Digital States (32 points per module times 16 modules).
            <para>
            This method may return a cached values.
            </para>
            <para>
            Ignore digital data returned for; channels that do not exist, empty module slots, or 
            module slots with analog or serial I/O modules.
            </para>
            </summary>
            <param name="i32StartIndex">Starting index to store the data in your boolean table.</param>
            <param name="baryStates">Boolean array. May be "null" if not information is desired.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadHighDensityDigitalStates(System.UInt32[],System.Int32)">
            <summary>
            Read All 512 High-Density Digital States To BitMask Array
            </summary>
            <param name="u32aryBitStates">Array to store states, one element per module. Array must be at least i32StartIndex + 16 in length.</param>
            <param name="i32StartIndex">Starting index to store values.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadHighDensityDigitalState(System.Int32,System.Boolean@)">
            <summary>
            Read a high-density digital state.
            <para>
            This method may return a cached value.
            </para>
            </summary>
            <param name="i32PointNumber">High-Density Point number (0 through 511) to store the data in your boolean table.</param>
            <param name="bState">State of the digital point.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadOptionallyClearHighDensityDigitalLatches(System.Boolean,System.Boolean[],System.Boolean[],System.Int32)">
            <summary>
            Read and Optionally Clear All 512 High-Density Latches To Boolean Arrays (32 points per module times 16 modules)
            </summary>
            <param name="i32StartIndex">Start index to read and optionally clear.</param>
            <param name="bClear">When true, clears the latch after being read. May return a cached value.</param>
            <param name="baryOnLatches">Array to store on-latch states.</param>
            <param name="baryOffLatches">Array to store off-latch states.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadOptionallyClearHighDensityDigitalLatches(System.Boolean,System.UInt32[],System.UInt32[],System.Int32)">
            <summary>
            Read and Optionally Clear All 512 High-Density Latches To BitMasks (32 points per module times 16 modules)
            <para>
            Method may return cached values if bClear is false.
            </para>
            </summary>
            <param name="i32StartIndex">Start index to read and optionally clear.</param>
            <param name="bClear">When true, clears the latch after being read.</param>
            <param name="u32aryOnLatches">Array to store on-latch bitstates.</param>
            <param name="u32aryOffLatches">Array to store off-latch bitstates.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadOptionallyClearHighDensityDigitalLatches(System.Int32,System.Int32,System.Boolean,System.Boolean[],System.Boolean[],System.Int32)">
            <summary>
            Read and Optionally Clear All 512 High-Density Latches To Boolean Arrays (32 points per module times 16 modules)
            <para>
            Method may return cached values if bClear is false.
            </para>
            </summary>
            <param name="i32StartModule">First High-Density module to read.</param>
            <param name="i32EndModule">Last High-Density module to read.</param>
            <param name="bClear">When true, clears the latch after being read.</param>
            <param name="baryOnLatches">Array to store on-latch bitstates.</param>
            <param name="baryOffLatches">Array to store off-latch bitstates.</param>
            <param name="i32StartIndex">Start index to read and optionally clear.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadHighDensityDigitalLatch(System.Int32,System.Int32,System.Boolean@,System.Boolean@)">
            <summary>
            Read a single high-density digital latch.
            <para>method may return a cached value.</para>
            </summary>
            <param name="i32Module">Module number, 0 to 15.</param>
            <param name="i32Channel">Channel number, 0 to 31.</param>
            <param name="bOnLatch">On-latch state.</param>
            <param name="bOffLatch">Off-latch state.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadOptionallyClearHighDensityDigitalCounters32(System.Boolean,System.UInt32[],System.Int32)">
            <summary>
            Read and Optionally clear High Density Digital Counters
            <para>When bClear is false, may return a cached value.</para>
            <para>When bClear is true, all high-density counters are cleared with this method.</para>
            </summary>
            <param name="i32StartIndex">Start index of the point to read counters.</param>
            <param name="bClear">When true, counters are cleared after reading.</param>
            <param name="u32aryCounters">Unsigned array to store the value of the counters.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadHighDensityDigitalCounter(System.Int32,System.Int32,System.UInt32@)">
            <summary>
            Read a High-Density Digital Counter
            <para>This method may return a cached value.</para>
            </summary>
            <param name="i32Module">The module number to read, 0 through 15.</param>
            <param name="i32Channel">The channel number to read 0 through 31.</param>
            <param name="u32Counter">The counter value.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WriteHighDensityDigitalStates(System.Int32,System.Int32,System.Boolean[],System.Int32)">
            <summary>
            Write High-Density Digital States, Module by Module Using A Boolean Array
            </summary>
            <param name="i32StartModule">Starting module number, values 0 through 15.</param>
            <param name="i32EndModule">Last module to write, values 0 through 15 (must be equal or higher to i32StartModule).</param>
            <param name="baryStates">Array of boolean states. Needs to be (i32EndModule - i32StartModule + 1) * 32 + i32ArrayStartIndex in length.</param>
            <param name="i32StartIndex">Starting index in the boolean array retrieve states to be written.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WriteHighDensityDigitalStates(System.Int32,System.Int32,System.Int32[],System.Int32)">
            <summary>
            Write High-Density Digital States, Module by Module Using A Bitmask Array
            </summary>
            <param name="i32StartModule">Starting module number, values 0 through 15.</param>
            <param name="i32EndModule">Last module to write, values 0 through 15 (must be equal or higher to i32StartModule).</param>
            <param name="i32aryStates">Array of integer bit states. Needs to be (i32EndModule - i32StartModule + 1) + i32StartIndex in length.</param>
            <param name="i32StartIndex">Starting index in the boolean array retrieve states to be written.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadPointName4096(System.Int32,System.String@)">
            <summary>
            Read the Analog or Digital Point Name, using the 4096-point memory model. SNAP-PAC units only.
            </summary>
            <param name="i32PointNumber">Point number to retrieve the point name from.</param>
            <param name="sPointName">Point name to store the point name retrieved.</param>
            <returns>0 when successful, -1 for error. Note, you may read a blank string "" if the point name is not initialized on the I/O unit.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WritePointName4096(System.Int32,System.String)">
            <summary>
            Write the Analog or Digital Point Name, using the 4096-point memory model. SNAP-PAC units only.
            </summary>
            <param name="i32PointNumber">Point number to write the point name to. Values 0 through 63 inclusive, are valid.</param>
            <param name="sPointName">Point name to write, 50 characters maximum. Name will be truncated if longer.</param>
            <returns>0 when successful, -1 for errort.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadAnalogEus512(System.Single[],System.Int32)">
            <summary>
            Read all Analog States as Engineering Units. This method relies on the OptoMMP
            area "Analog EU or Digital Counter Packed Data -- Read." 
            <para>
            This method may return cached values.
            </para>
            </summary>
            <param name="f32aryValues">Array to store values retrieved from the IO unit. This array must be 512 elements larger than i32StartIndex in length.</param>
            <param name="i32StartIndex">Starting index in the data array to store read values.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadAnalogEu512(System.Int32,System.Single@)">
            <summary>
            Read a single Analog Engineering Unit Value. This method relies on the
            area "Analog EU or Digital Counter Packed Data -- Read."
            <para>
            May return a cached value.
            </para>
            </summary>
            <param name="i32Point">Point number, range is 0 to 511.</param>
            <param name="f32Value">Parameter to store the point value.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WriteAnalogEu512(System.Int32,System.Single)">
            <summary>
            Write an analog output in the 512-Point IO Unit model.
            <para>
            If you would like to write all analog outputs at once, use the WriteAnalogEu64 method.
            </para>
            </summary>
            <param name="i32Point">The point number, range 0 to 511.</param>
            <param name="f32Value">The value to write.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadAnalogState4096(System.Int32,Opto22.OptoMMP3.OptoMMP.AnalogReadOptions,System.Single@)">
            <summary>
            Read an analog engineering units state, counts, or TPO values via a point number.
            <para>If Freshness is set to a non zero value, this method may returned a cached value.</para>
            <para>Note, caching is configured when read adjacent values of the point, e.g. eu state, max, and min.
            If large blocks of analog points are going to be accessed consider either the 512 point methods
            or creating a custom data area.</para>
            </summary>
            <param name="i32Point4096Number">Point number requested, range 0 to 4095.</param>
            <param name="eReadOption">Which attribute of the point to read.</param>
            <param name="f32AnalogValue">Current value of the analog input or output.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadOptionallyClearAnalogMaxMin4096(System.Int32,System.Boolean,System.Single@,System.Single@)">
            <summary>
            Read and clear analog maximum and minimum value of a point on a 4096-point rack.
            </summary>
            <param name="i32Point4096Number">Point number (0 through 4095)</param>
            <param name="bClear">When true, resets the maximum and minimum value after being read.</param>
            <param name="f32Maximum">Maximum value read.</param>
            <param name="f32Minimum">Minimum value read.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WriteAnalogState4096(System.Int32,Opto22.OptoMMP3.OptoMMP.AnalogWriteOptions,System.Single)">
            <summary>
            Sets a single analog state in engineering units, Counts or TPO values in the 4096-point IO unit memory map.
            <para>This method does not cache values.</para>
            </summary>
            <param name="i32Point4096Number">The point number to write, 0 to 4095.</param>
            <param name="eOption">The enumeration of the value option to be written.</param>
            <param name="f32WriteValue">The value to write.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WriteAnalogPointConfiguration4096(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Single,System.String,System.Single,System.Single)">
            <summary>
            Write Analog Point configuration in 4,096 Point Area.
            <para>
            This area must be configured before points may be read in the 512-point area.
            </para>
            <para>
            Useful for setting *all* configuration values of an analog point (input or output).
            </para>
            </summary>
            <param name="i32PointNumber">Point Number, 0 to 511.</param>
            <param name="i32PointType">The point type.</param>
            <param name="f32HighScale">Upper Scale Value (when input is 100%).</param>
            <param name="f32LowScale">Lower Scale Value (when input is either 0% [unipolar] or -100% [bipolar]).</param>
            <param name="f32Offset">Offset.</param>
            <param name="f32Gain">Gain.</param>
            <param name="f32FilterWeight">Filter Weight (0.0 disables or positive values).</param>
            <param name="bEnableWatchdog">Enable analog communication watchdog.</param>
            <param name="f32WatchdogValue">The value to force whhen communication watchdog occurs.</param>
            <param name="sPointName">Name of the point. Maximum 50 characters. Additional characters will be truncated.</param>
            <param name="f32LowerClamp">Lower analog clamp value.</param>
            <param name="f32UpperClamp">Upper analog clamp value.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadAnalogPointConfiguration4096(System.Int32,System.Int32@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Boolean@,System.Single@,System.String@,System.Single@,System.Single@)">
            <summary>
            Read Analog Point configuration in 4,096 Point Area.
            <para>
            This area must be configured before points may be read in the 512-point area.
            </para>
            <para>
            Useful for setting *all* configuration values of an analog point (input or output).
            </para>
            </summary>
            <param name="i32PointNumber">Point Number, 0 to 511.</param>
            <param name="i32PointType">The point type.</param>
            <param name="f32HighScale">Upper Scale Value (when input is 100%).</param>
            <param name="f32LowScale">Lower Scale Value (when input is either 0% [unipolar] or -100% [bipolar]).</param>
            <param name="f32Offset">Offset.</param>
            <param name="f32Gain">Gain.</param>
            <param name="f32FilterWeight">Filter Weight (0.0 disables or positive values).</param>
            <param name="bEnableWatchdog">Enable analog communication watchdog.</param>
            <param name="f32WatchdogValue">The value to force whhen communication watchdog occurs.</param>
            <param name="sPointName">Name of the point. Maximum 50 characters. Additional characters will be truncated.</param>
            <param name="f32LowerClamp">Lower clamp of analog reading.</param>
            <param name="f32UpperClamp">Upper clamp of analog reading.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WriteAnalogPointConfiguration4096(System.Int32,System.Int32)">
            <summary>
            Write Point configuration in 4,096 Point Area.
            <para>
            This area must be configured before points may be read in the 512-point area.
            </para>
            <para>
            Useful for setting the point's type such as setting a linearized
            thermocouple's probe type, a digital input or output, or
            setting an analog input to a specific input range and want
            to read the input as measurement units (volts, amps, etc).
            </para>
            <para>
            Due to the large variety of point type values that overlap,
            an enumeration is not available. Please see Opto 22 Form
            1465 for point type specific information.
            </para>
            </summary>
            <param name="i32PointNumber">Point Number, 0 to 4095.</param>
            <param name="i32PointType">The point type.</param>
            <returns>0 is OK, negative numbers imply an error occurred.
            See GetExtendedErrorInformation() for more information.
            </returns>
            <code>
            // set a J thermocouple for a SNAP-AITM-8 in position 5, channel #7 (starting from zero).<br />
            i32Result = Mmp.WriteAnalogPointConfiguration4096(OptoMMP.GetPointNumberFor4096(5, 7), 5);<br />
            </code>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WriteAnalogLoadCellConfiguration4096(System.Int32,System.UInt32,System.UInt32)">
            <summary>
            Write analog load cell configuration in 4,096 point area.
            <para>
            This just sets a load-cell module's fast-settle and filter weight parameters.
            </para>
            <para>
            While this is a configuration function, the data lies within the analog point write area (kind of unusual).
            </para>
            </summary>
            <param name="i32PointNumber">Point Number, 0 to 511.</param>
            <param name="u32FastSettle">Load cell input fast settle value. See form 1465 for values. Library does not check for invalid values.</param>
            <param name="u32FilterWeight">Filter weight value. See form 1465 for values. Library does not check for invalid values.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadAnalogLoadCellConfiguration4096(System.Int32,System.UInt32@,System.UInt32@)">
            <summary>
            Reads analog load cell configuration in 4,096 point area.
            <para>
            This just returns a single load-cell module's fast-settle and filter weight parameters.
            </para>
            <para>
            While this is a configuration function, the data lies within the analog point write area (kind of unusual).
            </para>
            </summary>
            <param name="i32PointNumber">Point Number, 0 to 511.</param>
            <param name="u32FastSettle">Load cell input fast settle value. See form 1465 for values.</param>
            <param name="u32FilterWeight">Filter weight value. See form 1465 for values.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadInts(System.Int64,System.Int32,System.Int32[],System.Int32)">
            <summary>
            Read a block of integers (32-bit signed values) from the Memory Map
            <para>
            There are many areas this toolkit does not support with a method. Use this method to access
            these areas.
            </para>
            <para>
            The maximum number of elements that may be transferred is 256.
            </para>
            <para>This method does not return cached values.</para>
            </summary>
            <param name="i64MmpAddress">Starting Opto MMP Address.</param>
            <param name="i32Length">Number of 32-bit integer values to read.</param>
            <param name="i32aryInts">Array of 32-bit integers.</param>
            <param name="i32StartingIndex">Starting index of the 32-bit integer array to store values.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WriteInts(System.Int64,System.Int32,System.Int32[],System.Int32)">
            <summary>
            Write a block of 32-bit integers to a specific Opto MMP Address.
            <para>
            There are many areas this toolkit does not support with a method. Use this method to access
            these areas.
            </para>
            <para>
            The maximum number of elements that may be transferred is 256.
            </para>
            </summary>
            <param name="i64MmpAddress">Starting Opto MMP Address.</param>
            <param name="i32Length">Length of 32-bit integers to write.</param>
            <param name="i32aryInts">Array of 32-bit integers.</param>
            <param name="i32StartingIndex">Starting index of the i32aryInts table to write from.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadUints(System.Int64,System.Int32,System.UInt32[],System.Int32)">
            <summary>
            Read a block of unsigned integers (32-bit unsigned values) from the Memory Map
            <para>
            There are many areas this toolkit does not support with a method. Use this method to access
            these areas.
            </para>
            <para>
            The maximum number of elements that may be transferred is 256.
            </para>
            <para>This method does not return cached values.</para>
            </summary>
            <param name="i64MmpAddress">Starting Opto MMP Address.</param>
            <param name="i32Length">Number of 32-bit unsigned integer values to read.</param>
            <param name="u32aryInts">Array of 32-bit unsigned integers.</param>
            <param name="i32StartingIndex">Starting index of the 32-bit unsigned integer array to store values.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WriteUints(System.Int64,System.Int32,System.UInt32[],System.Int32)">
            <summary>
            Write a block of 32-bit unsigned integers to a specific Opto MMP Address.
            <para>
            There are many areas this toolkit does not support with a method. Use this method to access
            these areas.
            </para>
            <para>
            The maximum number of elements that may be transferred is 256.
            </para>
            </summary>
            <param name="i64MmpAddress">Starting Opto MMP Address.</param>
            <param name="i32Length">Length of 32-bit unsigned integers to write.</param>
            <param name="u32aryInts">Array of 32-bit unsigned integers.</param>
            <param name="i32StartingIndex">Starting index of the u32aryInts table to write from.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadSingles(System.Int64,System.Int32,System.Single[],System.Int32)">
            <summary>
            Read a block of Singles from the Opto MMP Device.
            <para>
            There are many areas this toolkit does not support with a method. Use this method to access
            these areas.
            </para>
            <para>
            The maximum number of elements that may be transferred is 256.
            </para>
            <para>This method will not return cached values.</para>
            </summary>
            <param name="i64MmpAddress">Opto MMP Address.</param>
            <param name="i32Length">Quantity of Singles to read.</param>
            <param name="f32arySingles">Array of singles to read.</param>
            <param name="i32StartingIndex">Starting index of f32arySingles to read too.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WriteSingles(System.Int64,System.Int32,System.Single[],System.Int32)">
            <summary>
            Write a block of Singles to the Opto MMP Device.
            <para>
            There are many areas this toolkit does not support with a method. Use this method to access
            these areas.
            </para>
            <para>
            The maximum number of elements that may be transferred is 256.
            </para>
            </summary>
            <param name="i64MmpAddress">Opto MMP Address.</param>
            <param name="i32Length">Quantity of Singles to write.</param>
            <param name="f32arySingles">Array of singles to write.</param>
            <param name="i32StartingIndex">Starting index of f32arySingles to write.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadLongs(System.Int64,System.Int32,System.Int64[],System.Int32)">
            <summary>
            Read a block of longs (64-bit signed values) from the Opto MMP Device.
            <para>
            There are many areas this toolkit does not support with a method. Use this method to access
            these areas.
            </para>
            <para>
            The maximum number of elements that may be transferred is 128.
            </para>
            <para>Does not return cached values.</para>
            </summary>
            <param name="i64MmpAddress">Opto MMP Address.</param>
            <param name="i32Length">Quantity of longs to read.</param>
            <param name="i64aryLongs">Array of longs to read.</param>
            <param name="i32StartingIndex">Starting index of i64aryLongs to read too.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WriteLongs(System.Int64,System.Int32,System.Int64[],System.Int32)">
            <summary>
            Write a block of longs (64-bit signed values) to the Opto MMP Device.
            <para>
            There are many areas this toolkit does not support with a method. Use this method to access
            these areas.
            </para>
            <para>
            The maximum number of elements that may be transferred is 128 64-bit values.
            </para>
            </summary>
            <param name="i64MmpAddress">Opto MMP Address.</param>
            <param name="i32Length">Quantity of longs to write.</param>
            <param name="i64aryLongs">Array of longs to write.</param>
            <param name="i32StartingIndex">Starting index of i64aryLongs to write.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadULongs(System.Int64,System.Int32,System.UInt64[],System.Int32)">
            <summary>
            Read a block of unsigned longs (64-bit unsigned values) from the Opto MMP Device.
            <para>
            There are many areas this toolkit does not support with a direct method. Use this method to access
            these areas.
            </para>
            <para>
            The maximum number of elements that may be transferred is 128.
            </para>
            <para>Does not return cached values.</para>
            </summary>
            <param name="i64MmpAddress">Opto MMP Address.</param>
            <param name="i32Length">Quantity of unsigned UInt64s to read.</param>
            <param name="u64aryLongs">Array of unsigned UInt64s to read.</param>
            <param name="i32StartingIndex">Starting index of u64aryLongs to read too.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WriteULongs(System.Int64,System.Int32,System.UInt64[],System.Int32)">
            <summary>
            Write a block of unsigned longs (64-bit unsigned values) to the Opto MMP Device.
            <para>
            There are many areas this toolkit does not support with a direct method. Use this method to access
            these areas.
            </para>
            <para>
            The maximum number of elements that may be transferred is 128 64-bit values.
            </para>
            </summary>
            <param name="i64MmpAddress">Opto MMP Address.</param>
            <param name="i32Length">Quantity of unsigned UInt64s to write.</param>
            <param name="u64aryLongs">Array of unsigned UInt64s to write.</param>
            <param name="i32StartingIndex">Starting index of u64aryLongs to write.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.GetExtendedErrorInformation(System.String@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Retrieves extended error information. This information is also logged in the computer's Application event log.
            </summary>
            <param name="strMessage">String to store the message generated by the method.</param>
            <param name="bCommFault">True indicates a communication oriented fault. Close and reopen the object.</param>
            <param name="bProtocolFault">True indicates an Opto MMP oriented fault. More than likely, you're using UDP, and the I/O unit power cycled.
            Perform a WriteStatusCommand() and issue a "PowerUpClear". TCP connections will break when the I/O unit is reset so this code
            would not be returned.</param>
            <param name="bArgumentFault">True indicates a fault was generated by an improper argument. Inspect the argument values passed, a parameter is not correct.</param>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.LogErrorInformation">
            <summary>
            Log Extended Error Information
            </summary>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.LogInformation(System.String)">
            <summary>
            Log Information
            </summary>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ConvertTemperature(System.Double,Opto22.OptoMMP3.OptoMMP.TemperatureScale,Opto22.OptoMMP3.OptoMMP.TemperatureScale)">
            <summary>
            Convert temperatures.
            <para>
            The brain is slow to change temperature scales. Depending on the application, temperatures may need
            to be changed depending on the specific system needs; in some cases, the same system may need to 
            display more than one temperature scale. This method provides a faster and more efficient way of
            converting temperatures.</para>
            </summary>
            <param name="dInputTemp">Input temperature value.</param>
            <param name="eInScale">Input temperature scale.</param>
            <param name="eOutScale">Output temperature scale.</param>
            <returns>Temperature in units of eOutScale.</returns>
            <code>
            (C#)<br />
            dDegreesF = OptoMMP.ConvertTemperature(dDegreesC, OptoMMP.TemperatureScale.Celsius, OptoMMP.TemperatureScale.Fahrenheit);<br />
            </code>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.GetPointNumberFor64(System.Int32,System.Int32)">
            <summary>
            Converts Module and Channel to Point Number For 64 Point IO Unit Model.
            </summary>
            <param name="i32Module">Module number, values range from 0 to 15, no error checking provided.</param>
            <param name="i32Channel">Channel on the module, values range from 0 to 3, no error checking provided.</param>
            <returns>Point number for the 512 point model.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.GetPointNumberFor512(System.Int32,System.Int32)">
            <summary>
            Converts Module and Channel to Point Number For 512 Point IO Unit Model.
            </summary>
            <param name="i32Module">Module number, values range from 0 to 15, no error checking provided.</param>
            <param name="i32Channel">Channel on the module, values range from 0 to 31, no error checking provided.</param>
            <returns>Point number for the 512 point model.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.GetPointNumberFor4096(System.Int32,System.Int32)">
            <summary>
            Converts Module and Channel to Point Number For 4096 Point IO Unit Model.
            </summary>
            <param name="i32Module">Module number, values range from 0 to 63, no error checking provided.</param>
            <param name="i32Channel">Channel on the module, values range from 0 to 63, no error checking provided.</param>
            <returns>Point number for the 4096 point model.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.GetModuleAndChannelFromPoint64(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Converts A Point Number From The 64 Point Model To A Module And Channel Number.
            </summary>
            <param name="i32Point">64 model point number.</param>
            <param name="i32Module">The module number.</param>
            <param name="i32Channel">The point number.</param>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.GetModuleAndChannelFromPoint512(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Converts A Point Number From The 512 Point Model To A Module And Channel Number.
            </summary>
            <param name="i32Point">512 model point number.</param>
            <param name="i32Module">The module number.</param>
            <param name="i32Channel">The point number.</param>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.GetModuleAndChannelFromPoint4096(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Converts A Point Number From The 4096 Point Model To A Module And Channel Number.
            </summary>
            <param name="i32Point">4096 model point number.</param>
            <param name="i32Module">The module number.</param>
            <param name="i32Channel">The point number.</param>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.GetSerialOrSsiPortIndexFromModuleAndChannel(System.Int32,System.Int32)">
            <summary>
            Computes A Serial Port "Index" on the rack, for serial and SSI modules.
            </summary>
            <param name="i32Module">Module location on the rack, 0 to 15.</param>
            <param name="i32Channel">Channel on the module, 0 (Channel A) or 1 (Channel B).</param>
            <returns>0 to 31 for normal inputs, -1 for errant inputs.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ConvertNumberToFirmwareVersion(System.Int32)">
            <summary>
            Converts an Opto 22 Version number (32-bit) to a version string like R8.5A.
            <para>
            This works with either the loader or firmware version numbers
            </para>
            </summary>
            <param name="i32Number">The Opto 22 version number read from an OptoMMP Device.</param>
            <returns>A user readable string of the version number</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.Readme_WhenErrorsOccur">
            <summary>
            Description of when errors occur.
            <para>
            This assembly logs events to the computer's application event log. When a fault occurs (and the application
            didn't handle the condition), review the application event log. This file may be e-mailed to Opto 22's support
            so we may review the conditions of the fault as well.
            </para>
            <para>
            When a negative response occurs from an object using TCP/IP, close the OptoMMP object.
            </para>
            <para>
            When using serial or UDP/IP, back-off for a communication timeout period before resuming communications.
            These communication methods do not require the application to close the communication channel.
            </para>
            <para>
            This method does not perform any operation.
            </para>
            </summary>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.Readme_AboutIOModules">
            <summary>
            About SNAP IO Modules (added 02-23-2011)
            <para>
            These are the types of SNAP IO Modules.
            </para>
            4-Channel Digital Input or Output
            <para>
            To access the data of these IO modules use the digital methods that end with a "64." To determine the mapping
            index [a number from 0 to 63] use the static helper GetPointNumberFor64().
            </para>
            <para>
            (Up to) 4-Channel Analog Input or Outputs
            </para>
            <para>
            To access the data of these IO modules, use analog methods that end with a "64." To determine the mapping
            index [a number from 0 to 63] use the static helper GetPointNumberFor64(). The 4096 methods may be used to access
            these points on SNAP-PAC products.
            </para>
            <para>
            More than 4-Channel Digital Input or Output
            </para>
            <para>
            To access the data of these IO modules, use digital methods like ReadHighDensityDigitalState(), ReadHighDensityDigitalStates(),
            WriteHighDensityDigitalState() or other member that include the "HighDensity" wording.
            </para>
            <para>
            More than 4-Channel Analog Input or Output
            </para>
            <para>
            To access input values from these modules, use ReadAnalogEu512(), ReadAnalogEus512() and other 512 point configurations.
            Use the helper GetPointNumberFor512() to determine the point's index you wish to retrieve. The 3.x release of the SDK
            has additional 4096 point analog access methods.
            </para>
            <para>
            Serial Communication Modules are different modules. These require configuration (baud, stop bits, EOM characters etc) using
            this toolkit. See WriteSerialModuleConfiguration(). This is specifically for SCM-232 or SCM-485/422 IO modules. The
            communication stream is handled by a TCP session. You may use the ip4.Tcp_Client to connect to a serial module. The 
            TCP ports for serial modules range from 22500 through 22531. The port number is determined by using this method
            GetSerialOrSsiPortIndexFromModuleAndChannel() and add 22500. One connection is allow to a serial module at a time. New
            connection requests to a serial port already being used will automatically close the currently open session.
            </para>
            <para>
            This method does not perform any operation.
            </para>
            </summary>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadBrainDiagnosticInformation(Opto22.OptoMMP3.OptoMMP.structBrainDiagnosticInformation@)">
            <summary>
            Read the diagnostic information of the brain. Added (April 4, 2011).
            </summary>
            <param name="info">Parameter package read from the brain.</param>
            <returns>If result returned in zero, info's data is valid.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadPidQuantity(System.Int32@)">
            <summary>
            Report supported PID quantity in the brain.
            <para>
            This value is a constant for each brain/controller and firmware version. This value may only be
            read on SNAP-PAC-R or SNAP-PAC-EB series brains (not supported in SNAP-PAC-S controllers).
            </para>
            <para>
            May return a cached value.
            </para>
            </summary>
            <param name="i32PidQuantity">The quantity of PIDs the brain supports. Only valid when the result code is zero.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadPid(System.Int32,Opto22.OptoMMP3.OptoMMP.stPid@)">
            <summary>
            Read the entire PID.
            <para>
            Under the hood, PIDs are read in blocks of 8 PIDs. Both configuration and data areas are read.
            </para>
            <para>
            This method does _not_ support the SNAP-PID-V module (a legacy product).
            </para>
            <para>
            May return a cached value.
            </para>
            </summary>
            <param name="i32PidIndex">Index of the PID to read. A zero to "one less" number returned by ReadPidQuantity().
            Only negative indicies return a fault code.</param>
            <param name="PidData">The parsed data reported by the brain.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WritePid(System.Int32,Opto22.OptoMMP3.OptoMMP.stPid,Opto22.OptoMMP3.OptoMMP.ePidWriteOptions)">
            <summary>
            Write Pid (configure all or individual parameters [one at a time] of a PID)
            <para>
            This method does not support the SNAP-PID-V (a legacy product).
            </para>
            </summary>
            <param name="i32PidIndex">The index of the PID.</param>
            <param name="PidData">The data to modify the PID with.</param>
            <param name="eWriteOption">The selected write to perform.</param>
            <returns>0 is OK, negative numbers imply an error occurred. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.SingleToNetworkBytes(System.Single)">
            <summary>
            Convert a single to network ordered bytes
            </summary>
            <param name="f32Value"></param>
            <returns>Byte array.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.Int32ToNetworkBytes(System.Int32)">
            <summary>
            Convert an int32 to network order bytes
            </summary>
            <param name="i32Value"></param>
            <returns>Byte array.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.UInt32ToNetworkBytes(System.UInt32)">
            <summary>
            Convert a UInt32 to network order bytes
            </summary>
            <param name="u32Value"></param>
            <returns>Byte array.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.Int64ToNetworkBytes(System.Int64)">
            <summary>
            Convert an int64 to network order bytes
            </summary>
            <param name="i64Value"></param>
            <returns>Byte array.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.NetworkBytesToSingle(System.Byte[],System.Int32)">
            <summary>
            Convert a single to network ordered bytes
            </summary>
            <param name="byary">Byte array source of data.</param>
            <param name="i32StartIndex">Start index in the byte array.</param>
            <returns>Single</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.NetworkBytesToInt32(System.Byte[],System.Int32)">
            <summary>
            Convert an int32 to network order bytes
            </summary>
            <param name="byary">Byte array source of data.</param>
            <param name="i32StartIndex">Start index in the byte array.</param>
            <returns>Int32</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.AboutPulses">
            <summary>
            Information on generating digital pulses. Method does not perform any operations.
            <para>
            Caution, use pulses with only R9.0 or later firmware (SNAP-PAC-R or -EB devices only).
            </para>
            <para>
            Pulses are intended for use on a digital output point. This point may be either
            a 4-channel digital output or with a "high-density" digital output. High-Density
            is a digital output module with more than 4 channels. Pulses are available in two
            formats, pulses defined by "on-time/off-time" or a percentage of on-time based on 
            a time period.
            </para>
            <para>
            For either type of pulse, there is a delay time in seconds that delays the actual
            pulse start.
            </para>
            <para>
            For "time" based pulses, specify the "on-time" and the "off-time" in seconds. In
            this case, the resulting pulse time period is the sum of the on- and the off-times.
            This useful for generating pulsing claxons, alarms or indicators.
            </para>
            <para>
            For "duration" based pulses, you will specify an initial "on-percentage" of the total
            pulse period. The remaining percentage of the period will be off. 
            </para>
            <para>
            A time-proportional output is a continuous duration based pulse. In this case, usually
            the on-percentage is modified to adjust how much of the pulse period is in the "on" state.
            </para>
            <para>
            After a "configure" method is used, a pulse must be started using StartPulse(). A pulse may be stopped
            at any time using the StopPulse() method. In addition, forcing the digital output
            on or off cancels a pulse operation.
            </para>
            <para>
            When configuring a pulse for a 4-channel digital module, ensure the point index is calculated
            using the GetPointIndexFor64() and set the point model type enumeration properly.
            For high-density digital modules, use GetPointIndexFor512 and set the IoModel enumeration.
            </para>
            <para>
            There are limits for 4-channel digital output modules.
            SNAP-PAC-R1 has a minimum period of 0.006 seconds and an accuracy
            of 0.001 seconds. SNAP-PAC-R2 has a minimum period of 0.100 seconds and an accuracy
            of 0.001 seconds. SNAP-PAC-EB1 has a minimum period of 0.040 seconds and an accuracy
            of 0.005 seconds. SNAP-PAC-EB2 has a minimum period of 0.100 seconds and an accuracy
            of 0.005 seconds.
            </para>
            <para>
            For high-density digital outputs (modules with more than 4 digital outputs), the
            minimum period is 1.00 seconds and a worse case accuracy of 1 second.
            </para>
            </summary>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.PulseRawConfigure(System.Boolean,System.Boolean,System.Boolean,System.Single,System.Single,System.Single,System.UInt32,Opto22.OptoMMP3.OptoMMP.IoModel,System.Int32)">
            <summary>
            Base Pulse Method.
            <para>Currently left internal to limit full access to the pulse/period area.</para>
            </summary>
            <param name="bOnOffTimeMode">True means on/off values are time and not percent and period.</param>
            <param name="bNPulseMode">True indicates generate N pulse mode.</param>
            <param name="bInvertMode">True inverts A as "off" and B as "on".</param>
            <param name="f32OnValue">On time (seconds) or percent of on time.</param>
            <param name="f32OffValue">Off time (seconds) or pulse period (seconds).</param>
            <param name="f32StartDelayTime">Pulse start delay time in seconds.</param>
            <param name="u32PulseQuantity">Quantity of pulses.</param>
            <param name="eIoModelOfPointIndex">Specifies the point index of the model.</param>
            <param name="i32PointIndex64or512">The appropriate index for a 64-point or 512-point implementation.</param>
            <returns>0 is successful, negative values are faults. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ConfigureContinuousPulsesTime(System.Boolean,System.Single,System.Single,System.Single,Opto22.OptoMMP3.OptoMMP.IoModel,System.Int32)">
            <summary>
            Configure a continuous digital pulse train with on-time and off-time values.
            </summary>
            <param name="bInvert">True inverts logic levels, for example the on portion of the pulse is now off and vice versa.</param>
            <param name="f32StartDelayTimeSeconds">Delay start time in seconds.</param>
            <param name="f32OnTimeSeconds">On time in seconds.</param>
            <param name="f32OffTimeSeconds">Off time in seconds.</param>
            <param name="eIoModelOfPointIndex">Specifies the which model (64- or 512-point) the point index represents.</param>
            <param name="i32PointIndex64or512">Digital point index to pulse too. Provide 64 point index for 4-channel digital modules, 512- for high-density.</param>
            <returns>0 is successful, negative values are faults. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ConfigureContinuousPulsesDuration(System.Boolean,System.Single,System.Single,System.Single,Opto22.OptoMMP3.OptoMMP.IoModel,System.Int32)">
            <summary>
            Configure a continuous digital pulse train with percent-on and waveform period values.
            </summary>
            <param name="f32StartDelayTimeSeconds">Delay start time in seconds.</param>
            <param name="bInvert">True inverts logic levels, for example the on portion of the pulse is now off and vice versa.</param>
            <param name="f32OnPercent">On percent, values 0.0 to 100.0.</param>
            <param name="f32PeriodSeconds">Waveform period in seconds.</param>
            <param name="eIoModelOfPointIndex">Specifies the which model (64- or 512-point) the point index represents.</param>
            <param name="i32PointIndex64or512">Digital point index to pulse too. Provide 64 point index for 4-channel digital modules, 512- for high-density.</param>
            <returns>0 is successful, negative values are faults. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ConfigureNPulsesTime(System.Boolean,System.Single,System.Single,System.Single,System.UInt32,Opto22.OptoMMP3.OptoMMP.IoModel,System.Int32)">
            <summary>
            Configure an "N" pulse train using on-time and off-time parameters.
            </summary>
            <param name="bInvert">True inverts logic levels, for example the on portion of the pulse is now off.</param>
            <param name="f32StartDelayTimeSeconds">Delay start time in seconds.</param>
            <param name="f32OnTimeSeconds">On time in seconds.</param>
            <param name="f32OffTimeSeconds">Off time in seconds.</param>
            <param name="u32PulseQuantity">Number of pulses to generate.</param>
            <param name="eIoModelOfPointIndex">Specifies the which model (64- or 512-point) the point index represents.</param>
            <param name="i32PointIndex64or512">Digital point index to pulse too. Provide 64 point index for 4-channel digital modules, 512- for high-density.</param>
            <returns>0 is successful, negative values are faults. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ConfigureNPulsesDuration(System.Boolean,System.Single,System.Single,System.Single,System.UInt32,Opto22.OptoMMP3.OptoMMP.IoModel,System.Int32)">
            <summary>
            Configure a continuous digital pulse train using percent-on and wave period parameters.
            </summary>
            <param name="f32StartDelayTimeSeconds">Delay start time in seconds.</param>
            <param name="bInvert">True inverts logic levels, for example the on portion of the pulse is now off.</param>
            <param name="f32OnPercent">On percent, values 0.0 to 100.0.</param>
            <param name="f32PeriodSeconds">Total waveform period in seconds.</param>
            <param name="u32PulseQuantity">Number of pulses to generate.</param>
            <param name="eIoModelOfPointIndex">Specifies the which model (64- or 512-point) the point index represents.</param>
            <param name="i32PointIndex64or512">Digital point index to pulse too.</param>
            <returns>0 is successful, negative values are faults. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.StartPulse(Opto22.OptoMMP3.OptoMMP.IoModel,System.Int32)">
            <summary>
            Start a pulse train.
            </summary>
            <param name="eIoModelOfPointIndex">Specifies the point index of the model.</param>
            <param name="i32PointIndex64or512">Poing index number for either the 64 or 512 point model.</param>
            <returns>0 is successful, negative values are faults. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.StopPulse(Opto22.OptoMMP3.OptoMMP.IoModel,System.Int32,System.Boolean)">
            <summary>
            Stop a pulse. Note, writing a digital point state cancels an operating pulse.
            </summary>
            <param name="eIoModelOfPointIndex">Specifies the which model (64- or 512-point) the point index represents.</param>
            <param name="i32PointIndex64or512">Poing index number for either the 64 or 512 point model.</param>
            <param name="bTurnOn">When true, terminates the pulse and leave the output on. False terminates the pulse and leaves the output off.</param>
            <returns>0 is successful, negative values are faults. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WritePulsePercentage(Opto22.OptoMMP3.OptoMMP.IoModel,System.Int32,System.Single)">
            <summary>
            Write pulse percentage. Useful for continuous pulse trains... for example, time-proprotional outputs (e.g. heater applications).
            <para>Values less than 0.0 are treated as zero. Values above 100.0 are treated as 100.0.</para>
            <para>The specified TPO must have been set using ConfigureContinuousPulsesDuration() or ConfigureNPulsesDuration(). Otherwise,
            the result of f32Percent is unpredictable even with a successful result code.</para>
            </summary>
            <param name="eIoModelOfPointIndex">Specifies the which model (64- or 512-point) the point index represents.</param>
            <param name="i32PointIndex64or512">Index for the 64 or 512 point model index for the specific digital output used.</param>
            <param name="f32Percent">Percentage to set the continuous pulse train.</param>
            <returns>0 is successful, negative values are faults. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadPulsePercentage(Opto22.OptoMMP3.OptoMMP.IoModel,System.Int32,System.Single@)">
            <summary>
            Read pulse percentage.
            <para>The specified TPO must have been set using ConfigureContinuousPulsesDuration() or ConfigureNPulsesDuration() or
            the value returned in f32Percent is unpredictable (even when a successful result is returned by the method).</para>
            </summary>
            <param name="eIoModelOfPointIndex">Specifies the which model (64- or 512-point) the point index represents.</param>
            <param name="i32PointIndex64or512">Index for the 64 or 512 point model index for the specific digital output used.</param>
            <param name="f32Percent">Current percentage set for the pulse object.</param>
            <returns>0 is successful, negative values are faults. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WritePulsePeriod(Opto22.OptoMMP3.OptoMMP.IoModel,System.Int32,System.Single)">
            <summary>
            Write the pulse period.
            <para>The specified TPO must have been set using ConfigureContinuousPulsesDuration() or ConfigureNPulsesDuration() or the
            result of this operation is unpredictable.</para>
            </summary>
            <param name="eIoModelOfPointIndex">Specifies the which model (64- or 512-point) the point index represents.</param>
            <param name="i32PointIndex64or512">Index for the 64 or 512 point model index for the specific digital output used.</param>
            <param name="f32Period">Pulse period in seconds.</param>
            <returns>0 is successful, negative values are faults. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadPulsePeriod(Opto22.OptoMMP3.OptoMMP.IoModel,System.Int32,System.Single@)">
            <summary>
            Read the pulse period.
            <para>The specified TPO must have been set using ConfigureContinuousPulsesDuration() or ConfigureNPulsesDuration() or the
            result of this operation is unpredictable.</para>
            </summary>
            <param name="eIoModelOfPointIndex">Specifies the which model (64- or 512-point) the point index represents.</param>
            <param name="i32PointIndex64or512">Index for the 64 or 512 point model index for the specific digital output used.</param>
            <param name="f32Period">Pulse period in seconds.</param>
            <returns>0 is successful, negative values are faults. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WritePulseOnOffTime(Opto22.OptoMMP3.OptoMMP.IoModel,System.Int32,System.Single,System.Single)">
            <summary>
            Update a "time" configured pulse's on-time and off-time. Pulse must have been configured with either ConfigureContinuousPulsesTime()
            or ConfigureNPulsesTime() or unpredictable results will occur (even with a valid method result code).
            </summary>
            <param name="eIoModelOfPointIndex">Specifies the which model (64- or 512-point) the point index represents.</param>
            <param name="i32PointIndex64or512">Digital output index.</param>
            <param name="f32OnTime">New on-time value in seconds.</param>
            <param name="f32OffTime">New off-time value in seconds.</param>
            <returns>0 is successful, negative values are faults. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadPulseOnOffTime(Opto22.OptoMMP3.OptoMMP.IoModel,System.Int32,System.Single@,System.Single@)">
            <summary>
            Read a "time" configured pulse's on- and off-time values. The pulse must have been configured using ConfigureContinuousPulsesTime() or
            ConfigureNPulsesTime() or unpredictable results will be reported on f32OnTime and f32Offtime (even with a successful result of
            this method).
            </summary>
            <param name="eIoModelOfPointIndex">Specifies the which model (64- or 512-point) the point index represents.</param>
            <param name="i32PointIndex64or512">Digital output index.</param>
            <param name="f32OnTime">Pulse on-time in seconds.</param>
            <param name="f32OffTime">Pulse off-time in seconds.</param>
            <returns>0 is successful, negative values are faults. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadCustomConfiguration(System.Int32,System.Int32,System.UInt32[],System.Int32)">
            <summary>
            Read OptoMMP address configuration from the custom area.
            </summary>
            <param name="i32StartIndex">Starting index in the custom address area. Valid indexes are 0-1023.</param>
            <param name="i32Length">Amount of addresses to retrieve from I/O unit. Must be between 1 and 256 inclusive.</param>
            <param name="u32aryCustomAddresses">Array of OptoMMP addresses (lower 32-bits) as UInt32.</param>
            <param name="i32ArrayStartIndex">Start index of the array.</param>
            <returns>0 is successful, negative values are faults. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadCustomData(System.Int32,System.Int32,System.UInt32[],System.Int32)">
            <summary>
            Read custom configured data from the custom data area. Data is always returned as UInt32.
            </summary>
            <param name="i32StartIndex">Starting index in the custom area, values 0 through 1023.</param>
            <param name="i32Length">Number of custom addresses, do not exceed 256.</param>
            <param name="u32aryData">Array of OptoMMP addresses.</param>
            <param name="i32ArrayStartIndex">Starting index in u32aryData.</param>
            <returns>0 is successful, negative values are faults. See GetExtendedErrorInformation() for more information.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.SingleToUInt32(System.Single)">
            <summary>
            Converts a UInt32 (in binary form as a single) to a single.
            </summary>
            <param name="f32Data">Single data to convert.</param>
            <returns>Data converted to a UInt32 (unsigned 32-bit integer) from a Single.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.UInt32ToSingle(System.UInt32)">
            <summary>
            Converts a Single (in binary form) to a UInt32.
            </summary>
            <param name="u32Data">UInt32 data to convert to single.</param>
            <returns>Data converted into a Single (float) type.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadCustom(System.Int64,System.Int32,System.Int32,System.UInt32[],System.Int32)">
            <summary>
            Internal method accessing a block of OptoMMP data (internal generic read method)
            </summary>
            <param name="i64OptoMMPBlockAddress">The base address of the space.</param>
            <param name="i32StartIndex">Starting index in the custom area, values 0 through 1023.</param>
            <param name="i32Length">Length of data to read.</param>
            <param name="u32aryAddressesOrData">Data array.</param>
            <param name="i32ArrayStartIndex">Start index in the data array.</param>
            <returns>0 when successful, less than zero, for error.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WriteCustomConfiguration(System.Int32,System.Int32,System.UInt32[],System.Int32)">
            <summary>
            Write custom configuration addresses to the OptoMMP "custom area."
            </summary>
            <param name="i32StartIndex">Starting index in the custom area, values 0 through 1023.</param>
            <param name="i32Length">Length of data to write.</param>
            <param name="u32aryCustomAddresses">Addresses to write to the device.</param>
            <param name="i32ArrayStartIndex">Starting index in the </param>
            <returns>0 when successful, less than zero, for error.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WriteCustomData(System.Int32,System.Int32,System.UInt32[],System.Int32)">
            <summary>
            Write data to the custom area.
            </summary>
            <param name="i32StartIndex">Start index in the custom area. Valid values from 0 to 1023.</param>
            <param name="i32Length">Length of data (32-bit values) to write.</param>
            <param name="u32aryData">Array of data to write.</param>
            <param name="i32ArrayStartIndex">Start index in the data array to write.</param>
            <returns>0 when successful, less than zero, for error.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WriteCustom(System.Int64,System.Int32,System.Int32,System.UInt32[],System.Int32)">
            <summary>
            Write Data To The Custom Area (internal generic method)
            </summary>
            <param name="i64OptoMMPBlockAddress">The block address.</param>
            <param name="i32StartIndex">Starting index in the block (0-1023)</param>
            <param name="i32Length">Amount of 32-bit values to write.</param>
            <param name="u32aryAddressesOrData">Array of addresses or data</param>
            <param name="i32ArrayStartIndex">Starting index in the array to test.</param>
            <returns>0 for successful, less than zero for an error.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.WritePacSBCommunicationBlinkCodeFlag(System.Boolean)">
            <summary>
            Enable/Disable SNAP-PAC-SB communication blink code. This method enables a feature on the SNAP-PAC-SB to red blink the
            STAT indicator when a detected message exception occurs.
            <para>
            Blink Code (2)   Received packet CRC error.
            Blink Code (3)   Undefined packet type.
            Blink Code (4)   Malformed packet.
            </para>
            </summary>
            <param name="bEnable">True, enables feature, false disables feature.</param>
            <returns></returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.ReadPacSBCommunicationBlinkCodeFlag(System.Boolean@)">
            <summary>
            Read the SNAP-PAC-SB communication blink code flag status.
            </summary>
            <param name="bEnabled">True, feature enabled, false feature disabled.</param>
            <returns></returns>
        </member>
        <member name="P:Opto22.OptoMMP3.OptoMMP.LastTransactionTimeMs">
            <summary>
            Report the amount of time the last communicationt transaction consumed (in milliseconds).
            Includes the time consumed by transmitting the request, receiving the response, and
            all other associated latency. If a method that has multiple transactions was just
            prior used, this time represents the last transaction that occurred.
            </summary>
        </member>
        <member name="P:Opto22.OptoMMP3.OptoMMP.SerialDeviceIndex">
            <summary>
            Serial device index (also known as the serial address). If used
            on an UDP or TCP based connection, the station address is force
            to be zero.
            </summary>
            <code>
            // set the serial device index to station 240 (base 10)<br />
            Mmp.SerialDeviceIndex = (Byte)240;<br />
            <br />
            // retrieve the current selected serial station address<br />
            Byte u8CurrentSerialStation = Mmp.SerialDeviceIndex;<br />
            </code>
        </member>
        <member name="P:Opto22.OptoMMP3.OptoMMP.MinimumRecommendedTimeoutMs">
            <summary>
            Recommended minimum timeout in milliseconds. Serial timeout
            is based on a 1200 byte communication response. The value
            offered by this property does not take into account higher
            latency communications (such as wide area networks) or
            high-latency communication links (POTS modems, satellites,
            wireless spread spectrum modems, etc) or USB to serial
            converters with latency settings configured very high. This
            is just an "absolute" minimum to avoid rediculous timeout
            settings. Use after opening an object.
            </summary>
            <returns>
            Will report zero if the object is closed. Serial minimum
            timeout is dependent on the baud rate.
            </returns>
            <code>
            Int32 i32MinimumTimeoutMs = Mmp.MinimumRecommendedTimeoutMs;
            </code>
        </member>
        <member name="P:Opto22.OptoMMP3.OptoMMP.SetAllReceiveTimeoutsMs">
            <summary>
            Set the receive timeout for all devices in this object.
            Caution, too low of a timeout value may be accepted by
            this method. Please see MinimumRecommendedTimeoutMs for
            additional information. This method only applies a 50ms
            minimum timeout. Use when using PCI serial cards that 
            have baud rate clock divider options.
            </summary>
            <code>
            // set all devices timeout to 1000 ms<br />
            Mmp.SetAllReceiveTimeoutMs(1000);<br />
            </code>
        </member>
        <member name="P:Opto22.OptoMMP3.OptoMMP.ReceiveTimeoutMs">
            <summary>
            Receive timeout setting for the current selected serial station or network address.
            <para>
            The minimum timeout is 50 milliseconds, and will be 
            used even if the value is rediculous for the specific 
            communication arrangement.
            </para>
            <para>
            This is the timeout used when reading OptoMMP data. Serial OptoMMP writes use half of this timeout or 50 milliseconds, which ever is larger
            whereas network based OptoMMP writes do not scale the timeout. This is due to the radically different time it takes to emit data on a serial wire 
            versus a network topology.</para>
            </summary>
            <returns>Current timeout value.</returns>
            <code>Int32 i32ReceiveTimeoutMs = Mmp.ReceiveTimeoutMs;</code>
        </member>
        <member name="P:Opto22.OptoMMP3.OptoMMP.ReadCacheFreshnessMs">
            <summary>
            Get/Set the data cache freshness value of the current device 
            index (for TCP/UDP, always the same device, for serial, the
            last station address set in the property SerialDeviceIndex).
            <para>
            This edition of the OptoMMP library supports data read caching.
            When certain areas of the Opto MMP memory map are read, the data 
            reported may be cached. Subsequent accesses to the same Opto MMP 
            address space may use the cached data if the freshness for the 
            area has not expired.
            </para>
            <para>
            Data caching is intended to reduce the amount of communication
            traffic and messaging of the I/O unit. Experience shows 
            that many applicatons use point type of access methods and
            not bank methods. This generates an excessive amount of I/O
            traffic or results in a poor performing implementation.
            Data caching will substantially reduce network rates and
            dramatically increase the application's throughput.
            </para>
            <para>
            Freshness may not be acceptable in applications where fastest
            response time is needed. In these cases, setting the freshness
            to zero disables caching for the Ethernet I/O unit configured
            or the specific serial station addressed using SerialDeviceIndex.
            An application may choose when to enable or disable the read data
            cache. Doing so could generate a large volume of I/O communication
            traffic or latency.
            </para>
            <para>
            When this member is invoked, the entire data cache is invalidated.
            </para>
            <para>
            When any write I/O operation occurs (successful or not), the
            entire cache for the IP address or the specific station
            (or serial address) is invalidated. This implies that the
            best use of the cache is to group reads and writes together.
            Mixing reads and writes may cause cache invalidation
            inefficiencies.
            </para>
            <para>
            Only analog and digital states, analog max-mins, and digital
            latches are cached. Read and clear options do not cache data.
            </para>
            <para>
            The default freshness is 100ms.
            </para>
            <para>
            Writes are not cached. Any I/O writes invalidate the specific
            device's cache.
            </para>
            <para>
            Negative freshness values will be treated as zero.
            </para>
            </summary>
            <code>
            // set the cache freshness on serial station (address) 8 to 100 ms.<br />
            Mmp.SerialDeviceIndex = 8;<br />
            Mmp.ReadCacheFreshness = 100;<br />
            <br />
            // retreive the current cache freshness time from serial device address 8.<br />
            Int32 i32ReachCacheFreshnessValueInMs = Mmp.ReadCacheFreshnessMs;<br />
            </code>
        </member>
        <member name="P:Opto22.OptoMMP3.OptoMMP.SetAllReadCacheFreshnessMs">
            <summary>
            Set all this object's data cache freshness times.
            <para>
            See ReadCacheFreshnessMs for additional information. All devices' read data caches are invalidated (reset).
            </para>
            </summary>
            <code>
            // set all serial stations or the Ethernet device read cache freshness to 250ms<br />
            Mmp.SetAllReadCacheFreshnessMs = 250;<br />
            </code>
        </member>
        <member name="P:Opto22.OptoMMP3.OptoMMP.IsCommunicationOpen">
            <summary>
            Test if there is a possibility of communicating to the remote device. The primary object may be open but the
            underlying communication resource may have closed.
            <para>
            For TCP sockets, this test to see if the computer "believes" the socket is writeable. It does not guarantee
            that the actual socket is actually "writeable." A true test of communication is to read a section of the memory-map
            to see if a valid networking path is available to the destination host.
            </para>
            <para>
            For UDP sockets, if the Open() has been called, true is always returned. The only way to validate a UDP socket's
            ability to communicate is to read a section of the memory-map to see if a networking path is available.
            </para>
            <para>
            For serial, tests if the internal resource is open. This property doesn't indicate many "real world conditions" such
            as; USB converter unplugged, serial cable disconnected, I/O units are powered down, etc.
            </para>
            </summary>
            <returns>True if writeable, false when closed or the socket is not writeable.</returns>
            <code>
            Boolean bCommunicationOpen = Mmp.IsCommunicationOpen();<br />
            </code>
        </member>
        <member name="P:Opto22.OptoMMP3.OptoMMP.NextOptoMmpSequenceId">
            <summary>
            Computes the next Sequence Id and Returns the New Value.
            </summary>
            <returns>New Sequence ID</returns>
        </member>
        <member name="P:Opto22.OptoMMP3.OptoMMP.OptoMmpSequenceId">
            <summary>
            OptoMMP sequence ID.
            </summary>
            <returns>Current sequence ID.</returns>
        </member>
        <member name="P:Opto22.OptoMMP3.OptoMMP.LastOptoMmpProtocolResultCode">
            <summary>
            When a -10 Error is reported, this method returns the last Opto MMP RCode. Check Form 1465 for proper response.
            </summary>
            <returns>The last Opto MMP RCode generated.</returns>
            <code>
            Int32 i32LastMmpProtocolResultCode = Mmp.LastOptoMmpProtocolResultCode;<br />
            </code>
        </member>
        <member name="T:Opto22.OptoMMP3.OptoMMP.MMPCache">
            <summary>
            Internal class of the toolkit used to cache reads.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.MMPCache.i64Address">
            <summary>
            OptoMMP Address this entry belongs too.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.MMPCache.i64LastCacheTime">
            <summary>
            Last time this cache was refreshed.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.MMPCache.byary">
            <summary>
            Array of bytes for this cache.
            </summary>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.MMPCache.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.MMPCache.Set(System.Int64,System.Byte[],System.Int32)">
            <summary>
            Set this item's cache with _new_ data.
            </summary>
            <param name="i64Address">Opto MMP Address.</param>
            <param name="byary">Data to set.</param>
            <param name="i32Length">Length of the data array.</param>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.MMPCache.UpdateCache(System.Byte[])">
            <summary>
            Renew the cache data and the cache expiration timer.
            </summary>
            <param name="byary">The data to refresh. The length is defined by the internal cache length.</param>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.MMPCache.CacheValid(System.Int32)">
            <summary>
            Tests if the cache is valid.
            </summary>
            <param name="i32CacheTimeoutMs">The number of milliseconds the cache is valid.</param>
            <returns>True, the entry is valid.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.MMPCache.Compare(System.Int64,System.Int32)">
            <summary>
            Compare Opto MMP Address and Length
            </summary>
            <param name="i64Address">Opto MMP Address.</param>
            <param name="i32Length">Length of expected data.</param>
            <returns>True if the address and length matches the cache entry.</returns>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.MMPCache.GetCache(System.Byte[])">
            <summary>
            Get a copy of the cached data.
            </summary>
            <param name="byary">Byte array to receive the copied data.</param>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.MMPCache.CheckWrite(System.Int64,System.Int32)">
            <summary>
            Invalidates the cache entry if a device write occurs. This essentially marks the entry as dirty.
            <para>This forces the next read operation to access data from the device.</para>
            </summary>
            <param name="i64Address">OptoMMP Address.</param>
            <param name="i32Length">Length of data.</param>
        </member>
        <member name="M:Opto22.OptoMMP3.OptoMMP.MMPCache.Invalidate">
            <summary>
            Invalidate the Cache Entry
            </summary>
        </member>
        <member name="T:Opto22.OptoMMP3.OptoMMP.Connection">
            <summary>
            Connection Types for Opto MMP
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.Connection.UdpIp">
            <summary>
            Use a UDP/IP Connection for Opto MMP, most preferred data protocol.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.Connection.TcpIp">
            <summary>
            Use a TCP/IP Connection for Opto MMP, useful when going Int64 distances through gateways and/or routers.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.Connection.UdpIpv6">
            <summary>
            Use a UDP/IPv6 Connection for Opto MMP, most preferred if you have an IPv6 remote NAT address
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.Connection.TcpIpv6">
            <summary>
            Use a TCP/IPv6 Connection for Opto MMP, if you have an IPv6 remote NAT address
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.Connection.SerialOst">
            <summary>
            Use a serial card or USB connected serial port.
            </summary>
        </member>
        <member name="T:Opto22.OptoMMP3.OptoMMP.IoModel">
            <summary>
            For some methods and properties, specifies when a point index is offered, which IoModel the index references.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.IoModel.IoModel64">
            <summary>
            For a point index that references a 64-point bank area
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.IoModel.IoModel512">
            <summary>
            For a point index that references a 512-point bank area
            </summary>
        </member>
        <member name="T:Opto22.OptoMMP3.OptoMMP.StatusWriteCommand">
            <summary>
            Command Values For the Status Area Write - Read/Write (see Opto 22 Form 1465).
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.StatusWriteCommand.PowerUpClear">
            <summary>
            Send a Power-Up-Clear command to the I/O unit. Normally when using Open(), set bPowerUpClear to true.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.StatusWriteCommand.ResetToDefaults">
            <summary>
            Erases the I/O Unit FLASH configurations and reboots. TCP connections will be severed.
            Device or Ethernet network may take up to 30 seconds to recover. A communication
            timeout may be falsely logged in the Windows Application Event queue.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.StatusWriteCommand.StoreToFlash">
            <summary>
            Store the current I/O unit configuration to flash. This includes I/O configuration, serial settings, scratchpad values, etc.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.StatusWriteCommand.EraseFlash">
            <summary>
            Erases the I/O unit's FLASH image. This does not erase the currently in use RAM image.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.StatusWriteCommand.ResetHardware">
            <summary>
            Trigger the Opto MMP device to reboot (like power-cycling). A communication timeout
            may be falsely logged in the Windows Application Event queue.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.StatusWriteCommand.ClearDigitalEvents">
            <summary>
            Clear digital events.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.StatusWriteCommand.ClearAlarmsConfig">
            <summary>
            Clear alarm configuration.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.StatusWriteCommand.ClearPPPConfig">
            <summary>
            Clear PPP configuration.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.StatusWriteCommand.ClearEMailConfig">
            <summary>
            Clear EMail Configuration.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.StatusWriteCommand.ClearDigitalEventsExpanded">
            <summary>
            Clear digital events. For firmware 8.0 and lower, clears timer configuration.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.StatusWriteCommand.ClearPidLoops">
            <summary>
            Clears PID loop configuration.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.StatusWriteCommand.ClearDataLog">
            <summary>
            Clears the data log configuration.
            </summary>
        </member>
        <member name="T:Opto22.OptoMMP3.OptoMMP.SerialParity">
            <summary>
            Enumerations for a Serial Module's Parity Settings
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.SerialParity.None">
            <summary>
            No Parity
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.SerialParity.Odd">
            <summary>
            Odd Parity
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.SerialParity.Even">
            <summary>
            Even Parity
            </summary>
        </member>
        <member name="T:Opto22.OptoMMP3.OptoMMP.eDataCode">
            <summary>
            Probe data coding format enumerations.
            <para>
            Used to select how the module will detect the data format of the transducer.
            Note, Gray Code is more error tolerant. If you have a choice, use Gray Coding.
            </para>
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.eDataCode.Binary">
            <summary>
            The probe emits serial data that is binary encoded.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.eDataCode.GrayCode">
            <summary>
            Probe emits serial data in Gray code.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.eDataCode.None">
            <summary>
            No Assigned Code
            </summary>
        </member>
        <member name="T:Opto22.OptoMMP3.OptoMMP.AnalogWriteOptions">
            <summary>
            Enumerations of the analog value types that may be written.
            <para>TPO options are only for the analog TPO module, SNAP-AOD-29.</para>
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.AnalogWriteOptions.EngineeringUnits">
            <summary>
            Write the point in Engineering Units. Most applications use this.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.AnalogWriteOptions.Counts">
            <summary>
            Write the point in counts.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.AnalogWriteOptions.AnalogTpoResolution">
            <summary>
            Sets the TPO Resolution of a SNAP-AOD-29
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.AnalogWriteOptions.AnalogTpoPeriod">
            <summary>
            Sets the TPO Period of a SNAP-AOD-29
            </summary>
        </member>
        <member name="T:Opto22.OptoMMP3.OptoMMP.AnalogReadOptions">
            <summary>
            Enumerations of the analog value types that may be read.
            <para>TPO options are only for the analog TPO module, SNAP-AOD-29.</para>
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.AnalogReadOptions.EngineeringUnits">
            <summary>
            Write the point in Engineering Units. Most applications use this.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.AnalogReadOptions.Counts">
            <summary>
            Write the point in counts.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.AnalogReadOptions.AnalogTpoResolution">
            <summary>
            Sets the TPO Resolution of a SNAP-AOD-29
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.AnalogReadOptions.AnalogTpoPeriod">
            <summary>
            Sets the TPO Period of a SNAP-AOD-29
            </summary>
        </member>
        <member name="T:Opto22.OptoMMP3.OptoMMP.eDigitalFeature">
            <summary>
            Digital features that may be configured in the 64-point memory map.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.eDigitalFeature.None">
            <summary>
            Ordinary digital point.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.eDigitalFeature.Counter">
            <summary>
            Set up digital input as a counter.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.eDigitalFeature.QuadratureSimple">
            <summary>
            Set up digital input as a quadrature counter, requires a SNAP-IDC5Q (quadrature module).
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.eDigitalFeature.QuadratureIndex">
            <summary>
            Set up a digital input as a quadrature counter with a separate input as an index. SNAP-IDC5Q and additional digital input module required.
            </summary>
        </member>
        <member name="T:Opto22.OptoMMP3.OptoMMP.TemperatureScale">
            <summary>
            Selection of temperature scales for the temperature converter. Use with the static property ConvertTemperature().
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.TemperatureScale.Celsius">
            <summary>
            Celsius temperature scale.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.TemperatureScale.Kelvin">
            <summary>
            Kelvin temperature scale.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.TemperatureScale.Fahrenheit">
            <summary>
            Fahrenheit temperature scale.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.TemperatureScale.Rankine">
            <summary>
            Rankine temperature scale.
            </summary>
        </member>
        <member name="T:Opto22.OptoMMP3.OptoMMP.structBrainDiagnosticInformation">
            <summary>
            Structure of information returned by ReadBrainDiagnosticInfo().
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.structBrainDiagnosticInformation.sDevice">
            <summary>
            Part number of the device.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.structBrainDiagnosticInformation.u32FirmwareVersion">
            <summary>
            Firmware version, in binary packed format.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.structBrainDiagnosticInformation.sFirmwareVersion">
            <summary>
            Firmware version.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.structBrainDiagnosticInformation.sFirmwareDate">
            <summary>
            Firmware build date.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.structBrainDiagnosticInformation.sFirmwareTime">
            <summary>
            Firmware build time.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.structBrainDiagnosticInformation.u32IpAddress">
            <summary>
            IP Address, in binary packed format.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.structBrainDiagnosticInformation.sIpAddress">
            <summary>
            String version of the IP Address
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.structBrainDiagnosticInformation.u32SubnetworkAddress">
            <summary>
            Subnetwork address, in binary packed format.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.structBrainDiagnosticInformation.sSubnetworkAddress">
            <summary>
            String version of the subnetwork address.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.structBrainDiagnosticInformation.u32ScannerFlags">
            <summary>
            Brains's scanner flags, in binary packed format.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.structBrainDiagnosticInformation.u324ChannelDigitalScanCount">
            <summary>
            Digital scan counter. Ever increases when the scanner is running. Value does not change on controllers.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.structBrainDiagnosticInformation.u32AnalogHighDensityScanCount">
            <summary>
            Analog/High-Density module scanner count.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.structBrainDiagnosticInformation.u64MsSincePowerup">
            <summary>
            Milliseconds since powerup... this is a 64-bit version of the value.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.structBrainDiagnosticInformation.sUpTime">
            <summary>
            String indicating up time. This is relative the reading computer's local time.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.structBrainDiagnosticInformation.sEstimatedRestartTime">
            <summary>
            String indicating the estimated restart or powerup time.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.structBrainDiagnosticInformation.u32SmartModulesPresent">
            <summary>
            Smart modules present. A bitmask indicating when a "non" 4-channel digital module is installed in the rack.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.structBrainDiagnosticInformation.u32ArcnetReconfigsDetected">
            <summary>
            Arcnet reconfigs detected by the brain. If the rack is empty or only 4-channel
            digital IO modules are installed in the rack, this value will ever increase.
            In this case, this is a normal case. Consider disabling the Analog/High-Density
            digital scanners in these cases. Perform this with the method WriteScannerFlags().
            The scanner value must be stored to flash and the brain restarted for settings
            to take effect.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.structBrainDiagnosticInformation.u32ArcnetReconfigInitatedbyIoUnit">
            <summary>
            Reconfigs initiated by the brain. This occurs when the brain cannot locate a non
            4-channel digital IO module. If the rack is empty or populated with only 4-channel
            digital modules, this number will ever increase. For unpopulated racks or ones
            using only 4-channel digital modules, the analog/high-density scanner may be disabled.
            See WriteScannerFlags().
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.structBrainDiagnosticInformation.u32ArcnetTransmitAttempts">
            <summary>
            Number of times the brain attempts to communicate with an any module (installed or not).
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.structBrainDiagnosticInformation.u32ArcnetAcks">
            <summary>
            The number of replies the brain received when communicating to modules. This number does
            not match u32ArcnetReconfigInitiatedbyIoUnit.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.structBrainDiagnosticInformation.u32ArcnetTimeouts">
            <summary>
            Number of timeouts. This is logged when the brain knows there is a non 4-channel digital
            module in a position. This may indicate the module was "hot swapped," a rack voltage dip
            occurred, or electrical noise corrupted a messaging session.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.structBrainDiagnosticInformation.u32ArcnetOther">
            <summary>
            All other Arcnet communication errors between the brain and the non 4-channel digital IO
            modules.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.structBrainDiagnosticInformation.u32ArcnetTimeoutValue">
            <summary>
            The current timeout the analog scanner is using. Based on a history of communication performance
            and hence changes dynamically.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.structBrainDiagnosticInformation.u32ArcnetReceiveInterrupts">
            <summary>
            The number of receive interrupts generated by the internal Arcnet device.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.structBrainDiagnosticInformation.u32EthernetErrorsLateCollisions">
            <summary>
            Number of Ethernet late collisions detected. Non-zero values either indicate the use of
            an Ethernet hub (as opposed to a "switching-hub" or switch) or a misconfigured Ethernet
            switch (for managed switches, use only the "auto-negotiate" setting). Do *not* ever use any
            other setting (for example, 100, Full-Duplex).
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.structBrainDiagnosticInformation.u32EthernetErrorsExcessiveCollisions">
            <summary>
            Number of Ethernet excessive collisions detected. Non-zero values either indicate the use of
            an Ethernet hub (as opposed to a "switching-hub" or switch) or a misconfigured Ethernet
            switch (for managed switches, use only the "auto-negotiate" setting). Do *not* ever use any
            other setting (for example, 100, Full-Duplex).
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.structBrainDiagnosticInformation.u32EthernetErrorsOthers">
            <summary>
            Number of miscellaneous Ethernet errors. This could be electrical noise interfering with the
            data transmission or Ethernet CRC errors.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.structBrainDiagnosticInformation.u32EthernetMACResets">
            <summary>
            Ethernet MAC Resets.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.structBrainDiagnosticInformation.u32DigitalOutputResets">
            <summary>
            Counts if a digital outputs resets. Indicative of intense electric noise around the rack.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.structBrainDiagnosticInformation.u32DigitalInterruptFailures">
            <summary>
            Counts the number of times the digital IO system didn't interrupt the brain.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.structBrainDiagnosticInformation.u32aryModulesTimesDiscovered">
            <summary>
            Counter for the number of time each analog or high-density digital IO module is discovered.
            There is a unique element with each module position. Values indicate voltage dips, module
            hot-swaps, bad connections with modules, or electric noise.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.structBrainDiagnosticInformation.u32SecondsSincePowerup">
            <summary>
            Amount of time in seconds device or service has been running.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.structBrainDiagnosticInformation.u32MsSincePowerup">
            <summary>
            Amount of time in milliseconds device or service has been running. Note, this value rolls over
            around every 47 days of continuous running.
            </summary>
        </member>
        <member name="T:Opto22.OptoMMP3.OptoMMP.stPid">
            <summary>
            When reading or writing a PID, these are the available parameters returned or written.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.stPid.f32Error">
            <summary>
            Current error calculated by the PID.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.stPid.f32GainContribution">
            <summary>
            Contribution of the gain portion of the PID.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.stPid.f32IntegralContribution">
            <summary>
            Contribution of the integral portion of the PID.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.stPid.f32DerivativeContribution">
            <summary>
            Contribution of the derivative portion of the PID.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.stPid.f32CurrentIntegral">
            <summary>
            The current integral value.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.stPid.u32ScanCounter">
            <summary>
            Current scan counter.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.stPid.bInputBelowLowScale">
            <summary>
            True when the input is too low. Input clamping must be enabled.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.stPid.bInputAboveHighScale">
            <summary>
            True when the input is too high. Input clamping must be enabled.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.stPid.bOutputForced">
            <summary>
            True when the output is forced. Output forcing must be enabled.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.stPid.f32ProcessVariableOrInput">
            <summary>
            Current process variable read or the value provided by the supervisory system.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.stPid.f32Setpoint">
            <summary>
            Current setpoint read or the value provided by the supervisory system.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.stPid.f32CurrentFeedForwardContribution">
            <summary>
            Current feed forward contribution.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.stPid.f32CurrentOutput">
            <summary>
            Current output computed by the PID. Use to overwrite the output when a PID
            is in manual mode. The output may be used by a supervisory system.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.stPid.f32GainParameter">
            <summary>
            Gain, K, or proprotional term.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.stPid.f32IntegralParameter">
            <summary>
            I term.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.stPid.f32DerivativeParameter">
            <summary>
            D or derivative term.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.stPid.f32FeedForwardGainParameter">
            <summary>
            Feed forward gain.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.stPid.f32MaximumOutputChange">
            <summary>
            Maximum output change limit.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.stPid.f32MinimumOutputChange">
            <summary>
            Minimum output change limit.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.stPid.f32InputLowRange">
            <summary>
            Input low range limit.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.stPid.f32InputHighRange">
            <summary>
            Input high range limit.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.stPid.f32OutputLowerClamp">
            <summary>
            Lower output clamp limit.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.stPid.f32OutputUpperClamp">
            <summary>
            Upper output clamp limit.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.stPid.f32PidScanTimeSeconds">
            <summary>
            Scan time, in seconds (with 1 ms resolution).
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.stPid.f32InputLowOutputForceValue">
            <summary>
            When the input is too low, this is the value to force the output too.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.stPid.f32InputHighOutputForceValue">
            <summary>
            When the input is too high, this is the value to force the output too.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.stPid.u32InputSourceOptoMmpAddress">
            <summary>
            OptoMMP address of the input source. Use the lower 32-bits of the OptoMMP
            48-bit address. Use zero if the input is provided by the supervisory system.
            </summary>
            <para>
            Warning. For users of the Velocity C algorithm with firmware R8.5e and later,
            and with an input OptoMMP address == 0, use the alternate PID Input value
            when setting the PID input.
            </para>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.stPid.u32SetpointSourceOptoMmpAddress">
            <summary>
            OptoMMP address of the setpoint source. Use the lower 32-bits of the OptoMMP
            48-bit address. Use zero if the setpoint is provided by the supervisory system.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.stPid.u32OutputDestinationOptoMmpAddress">
            <summary>
            OptoMMP address of the output destination. Use the lower 32-bits of the OptoMMP
            48-bit address. Use zero if the output is read and processed only by the supervisory system.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.stPid.eAlgorithm">
            <summary>
            Algorithm selection.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.stPid.bInManualMode">
            <summary>
            Manual (true) or automatic mode.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.stPid.bSquareRootOfInput">
            <summary>
            Square root the input. Use for differential-pressure based flowmeters.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.stPid.bForceOutputWhenInputOutOfRange">
            <summary>
            Controls if the output is forced when the input is out of range.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.stPid.bSwitchToManualWhenInputOutOfRange">
            <summary>
            Controls if the PID is forced to manual mode when the input is out of range.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.stPid.f32CurrentInput">
            <summary>
            The immediate input available to the PID.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.stPid.f32CurrentSetpoint">
            <summary>
            The immediate setpoint available to the PID.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.stPid.f32SupervisoryInputToPid">
            <summary>
            When algorithm is set to Velocity C and the Input OptoMMP address is zero, and firmware
            is R8.5e or later, use this value as the location to provide the PID the supervisory
            input. This is also coorelated with KB81008. You may search for the KB on the
            Opto 22 website.
            </summary>
        </member>
        <member name="T:Opto22.OptoMMP3.OptoMMP.ePidAlgorithm">
            <summary>
            Algorithm Options
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.ePidAlgorithm.Disabled">
            <summary>
            Disables the PID. Only a disabled setting halts the operation of a PID.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.ePidAlgorithm.VelocityB">
            <summary>
            Velocity B Algorithm.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.ePidAlgorithm.Isa">
            <summary>
            ISA Algorithm.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.ePidAlgorithm.Parallel">
            <summary>
            Parallel Algorithm.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.ePidAlgorithm.Interacting">
            <summary>
            Interacting Algorithm.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.ePidAlgorithm.VelocityC">
            <summary>
            Velocity C Algorithm.
            Only available on R8.5e firmware and later; library does not check validity of this value with the firmware.
            </summary>
            <para>
            See notes regarding if the PID's input is supplied by a supervisory system (as opposed to an analog input).
            </para>
        </member>
        <member name="T:Opto22.OptoMMP3.OptoMMP.ePidWriteOptions">
            <summary>
            PID Write Options
            <para>
            Use enumeration ePidWriteOptions.InitializeAll to first time initialize the PID.
            Leave the algorithm in the Disabled setting or the PID instantly starts. You may
            also want to leave the PID in manual mode as well. Set the algorithm and the
            auto/manual mode thereafter.
            </para>
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.ePidWriteOptions.InitializeAll">
            <summary>
            Only use when completely initializing the PID. This is not a gracious
            initialization. You'll really want to leave the algorithm as default
            and use one of the other options to set it.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.ePidWriteOptions.ProcessVariable">
            <summary>
            Set the process variable (input). Only use when the process variable
            OptoMMP address is set to zero otherwise, unpredictable results will
            occur. Uses f32ProcessVariableOrInput.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.ePidWriteOptions.Setpoint">
            <summary>
            Set the setpoint. Only use when the setpoint OptoMMP address is set
            to zero otherwise, unpredictable results will occur. Uses f32Setpoint.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.ePidWriteOptions.PCoefficient">
            <summary>
            Set the proportional, K, or gain coefficient. Uses f32GainParameter.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.ePidWriteOptions.ICoefficient">
            <summary>
            Set the integral or I coefficient. Uses f32IntegralParameter.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.ePidWriteOptions.DCoefficient">
            <summary>
            Set the derivative or D coefficient. Uses f32DerivativeParameter.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.ePidWriteOptions.FFGain">
            <summary>
            Set the feed forward gain coefficient. Uses f32FeedForwardGainParameter.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.ePidWriteOptions.OutputChangesAllowed">
            <summary>
            Set the maximum and minimum output change limits. Uses f32MaximumOutputChange and
            f32MinimumOutputChange.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.ePidWriteOptions.ProcessVariableClamps">
            <summary>
            Set the limits on the process variable. Uses f32InputLowRange and f32InputHighRange.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.ePidWriteOptions.OutputClamps">
            <summary>
            Set the limit on the output. Uses f32OutputLowerClamp and f32OutputUpperClamp.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.ePidWriteOptions.Scantime">
            <summary>
            Set the PID scan time. Uses f32PidScanTimeSeconds.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.ePidWriteOptions.OutputForceValuesWhenInputOutOfRange">
            <summary>
            Set the output forcing values when the input goes out of range. Uses
            f32InputLowOutputForceValue and f32InputHighOutputForceValue. This
            value is usually only initialized once.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.ePidWriteOptions.ProcessVariableOptoMmpAddress">
            <summary>
            Set the process variable OptoMMP address. Use zero if your application
            provides the process variable. Uses u32InputSourceOptoMmpAddress. Use
            the lower 32-bits of the 48-bit OptoMMP address.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.ePidWriteOptions.SetpointOptoMmpAddress">
            <summary>
            Set the setpoint variable OptoMMP address. Use zero if your application
            provides the setpoint. Uses u32SetpointSourceOptoMmpAddress. Use the
            lower 32-bits of the 48-bit OptoMMP address.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.ePidWriteOptions.OutputOptoMmpAddress">
            <summary>
            Set the output OptoMMP address. Use zero if your application reads
            and processes the output. Uses u32OutputDestinationOptoMmpAddress.
            Use the lower 32-bits of the 48-bit OptoMMP address.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.ePidWriteOptions.PidAlgorithm">
            <summary>
            The algorithm of the PID. Only use this after initializing the PID.
            Do not change thereafter or unpredictable results will occur. Use
            eAlgorithm. Use enumeration "Disabled" to shut down the PID functionality.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.ePidWriteOptions.PidAutoManualMode">
            <summary>
            Set the PID in auto or manual mode. Uses structure property bInManualMode.
            When Ethernet I/O based PID's are in manual mode and the PID output is linked
            to an analog output module, you may only change the output value by modifying
            the PID's output. Writing to the actual analog output is futile as the next
            scan of the PID will clobber the recently written value.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.ePidWriteOptions.ConfigurationFlags">
            <summary>
            The configuration flags. Uses bSquareRootOfInput, bForceOutputWhenInputOutOfRange,
            and bSwitchToManualWhenInputOutOfRange. This operation forces all three flags
            at once. These are typically only written at initialization. They aren't intended
            to be constant enabled/disabled.
            </summary>
        </member>
        <member name="F:Opto22.OptoMMP3.OptoMMP.ePidWriteOptions.SupervisorPidInput">
            <summary>
            Use only for Velocity C, when the PID input is supplied by a supervisory system and
            the firmware version is R8.5e or later.
            </summary>
        </member>
        <member name="T:Opto22.StreamsHelper.Udp">
            <summary>
            Local UDP encapsulation library only for the streaming assemblies. Do not use in your project.
            </summary>
        </member>
        <member name="M:Opto22.StreamsHelper.Udp.Open(System.Int32)">
            <summary>
            Open a UDP/IP client object.
            </summary>
            <param name="i32Port">Port number to bind the connection too.</param>
            <returns></returns>
        </member>
        <member name="M:Opto22.StreamsHelper.Udp.Close">
            <summary>
            Close the UDP/IP client object.
            </summary>
        </member>
        <member name="M:Opto22.StreamsHelper.Udp.Receive(System.Byte[],System.Int32,System.Net.EndPoint@)">
            <summary>
            Receive data from the UDP/IP client object.
            </summary>
            <param name="byary">Byte array to store data</param>
            <param name="i32TimeoutMs">Timeout in milliseconds</param>
            <param name="RemoteEP">Endpoint this packet arrived from</param>
            <returns>Greater than zero indicates bytes received, zero indicates timeout, -1 is a fault.</returns>
        </member>
        <member name="M:Opto22.StreamsHelper.Udp.Send(System.Byte[],System.Int32,System.Net.EndPoint)">
            <summary>
            Send data to the UDP/IP server.
            </summary>
            <param name="byary">Bytes to send, at least i32Tx_Length in length.</param>
            <param name="i32Tx_Length">Number of bytes to send.</param>
            <param name="SourceEndPoint">The source of this message.</param>
            <returns>0 if successful, -1 if there is a socket error.</returns>
        </member>
        <member name="M:Opto22.StreamsHelper.Udp.Empty">
            <summary>
            Empty the receive buffer.
            </summary>
        </member>
        <member name="T:Opto22.StreamsHelper.StreamMessage">
            <summary>
            A small class encapsulating the data received from a streaming client.
            </summary>
        </member>
        <member name="M:Opto22.StreamsHelper.StreamMessage.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Opto22.StreamsHelper.StreamMessage.Set(System.Net.EndPoint,System.Byte[],System.Int32)">
            <summary>
            Populates this object with data, used only by the background thread inside the OptoMMPStream class.
            </summary>
            <param name="endpoint">Source of the data.</param>
            <param name="byary">The byte array received.</param>
            <param name="i32Length">Length of received data.</param>
        </member>
        <member name="M:Opto22.StreamsHelper.StreamMessage.Get(System.Net.EndPoint@,System.Byte[]@)">
            <summary>
            Retrieve the data encapsulated in this object. Only use this in the call-back delegate.
            </summary>
            <param name="endpoint">Source of this data.</param>
            <param name="byary">Byte array received.</param>
        </member>
        <member name="T:Opto22.StreamsHelper.OptoMMPStream">
            <summary>
            Encapsulation class for assisting streaming implementations using the OptoMMP streaming capability.
            <para>
            This functionality is available with any Opto 22 Ethernet based I/O brain.
            </para>
            <para>
            This library is currently built with the 3.5 SP1 .Net Framework.
            </para>
            <para>
            This library supports Windows 7 Professional, Windows 8.1 Professional. Please use an Intel "Core 2" or AMD Athlon II or Phenom (or newer) microprocessor.
            </para>
            </summary>
        </member>
        <member name="F:Opto22.StreamsHelper.OptoMMPStream.Server">
            <summary>
            Server object for handling incoming messages.
            </summary>
        </member>
        <member name="F:Opto22.StreamsHelper.OptoMMPStream.MessageHandler">
            <summary>
            The delegate offered as a callback by the application.
            </summary>
        </member>
        <member name="M:Opto22.StreamsHelper.OptoMMPStream.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Opto22.StreamsHelper.OptoMMPStream.Open(System.Int32,Opto22.StreamsHelper.OptoMMPStream.ProcessStream)">
            <summary>
            Open the OptoMMPStream object
            </summary>
            <param name="i32UdpPort">The PC UDP port to receive data on.</param>
            <param name="MessageHandler">Delegate call-back routine to handle the received message.</param>
        </member>
        <member name="M:Opto22.StreamsHelper.OptoMMPStream.Start">
            <summary>
            Start the stream object on the PC side.
            </summary>
            <returns>Negative value for error, probably for overlapping UDP service ports. Zero for okay.</returns>
        </member>
        <member name="M:Opto22.StreamsHelper.OptoMMPStream.Stop">
            <summary>
            Stop the background thread.
            </summary>
        </member>
        <member name="M:Opto22.StreamsHelper.OptoMMPStream.Close">
            <summary>
            Close the whole object.
            </summary>
        </member>
        <member name="M:Opto22.StreamsHelper.OptoMMPStream.ProcessMessageasBrainStream(Opto22.StreamsHelper.StreamMessage,System.Net.EndPoint@,System.Int16@,System.Single[]@,System.UInt32[]@,System.UInt64@,System.UInt64@,System.UInt64@,System.UInt64@)">
            <summary>
            Process a message returned as a callback. This handles the default "streaming" configuration of the
            Opto MMP device.
            <para>
            Many Opto MMP devices may be configured to stream at one thread. Each device may be determined by
            comparing the "EndPoint" information.
            </para>
            <para>Since this is UDP, the receiver should inspect the "endpoint" address to ensure it can identify
            the correct sender of this message.</para>
            </summary>
            <param name="Message">The message given by the callback.</param>
            <param name="endpoint">The source of the message.</param>
            <param name="i16SequenceId">Sequence ID of this message, a value from 0 to 15.</param>
            <param name="faryAnalog">64 analog values of the brain.</param>
            <param name="u32aryCounters">Value of the enabled digital input counters (from 64 point map)</param>
            <param name="u64DigitalStates">64-bit compressed value of all the 64-point digital states. 1 == on.</param>
            <param name="u64OnLatches">64-bit compressed value of all the 64-point digital on latches. 1 == latched.</param>
            <param name="u64OffLatches">64-bit compressed value of all the 64-point digital off latches. 1 == latched.</param>
            <param name="u64ActiveCounters">64-bit compressed value of all the active counter states. 1 == enabled.</param>
            <returns>true if the received message is a valid default stream message, false if it is not.</returns>
        </member>
        <member name="M:Opto22.StreamsHelper.OptoMMPStream.ProcessMessageasBrainStreamUint32Array(Opto22.StreamsHelper.StreamMessage,System.Net.EndPoint@,System.Int16@,System.UInt32@,System.Int32,System.UInt32[]@)">
            <summary>
            Process a message returned as a callback. This handles a customer stream of just 32-bit unsigned integers.
            The data may be casted as 32-bit signed integers too.
            <para>
            Many Opto MMP devices may be configured to stream at one thread. Each device may be determined by
            comparing the "EndPoint" information.
            </para>
            <para>Since this is UDP, the receiver should inspect the "endpoint" address to ensure it can identify
            the correct sender of this message.</para>
            </summary>
            <param name="Message">The message given by the callback.</param>
            <param name="endpoint">The source of the message.</param>
            <param name="i16SequenceId">Sequence ID of this message, a value from 0 to 15.</param>
            <param name="u32ExpectedMmpAddress">The expected Opto MMP address of the packet.</param>
            <param name="i32ExpectedU32Ints">Expected number of 32-bit integers to receive.</param>
            <param name="u32aryValues">The values received.</param>
            <returns>true if the received message is a valid default stream message, false if it is not.</returns>
        </member>
        <member name="M:Opto22.StreamsHelper.OptoMMPStream.ProcessMessageasBrainStreamSingleArray(Opto22.StreamsHelper.StreamMessage,System.Net.EndPoint@,System.Int16@,System.Int32@,System.Int32,System.Single[]@)">
            <summary>
            Process a message returned as a callback. This handles a custom stream of floats (aka Singles).
            <para>
            Many Opto MMP devices may be configured to stream at one thread. Each device may be determined by
            comparing the "EndPoint" information.
            </para>
            <para>Since this is UDP, the receiver should inspect the "endpoint" address to ensure it can identify
            the correct sender of this message.</para>
            </summary>
            <param name="Message">The message given by the callback.</param>
            <param name="endpoint">The source of the message.</param>
            <param name="i16SequenceId">Sequence ID of this message, a value from 0 to 15.</param>
            <param name="i32ExpectedMmpAddress">The OptoMMP address reported.</param>
            <param name="i32ExpectedSingles">The number of expected singles in the response.</param>
            <param name="f32aryValues"></param>
            <returns>true if the received message is a valid default stream message, false if it is not.</returns>
        </member>
        <member name="M:Opto22.StreamsHelper.OptoMMPStream.ProcessMessageasBrainStreamRawBytes(Opto22.StreamsHelper.StreamMessage,System.Net.EndPoint@,System.Int32@,System.Byte[]@)">
            <summary>
            Process a message returned as a callback. This handles a custom stream of floats (aka Singles).
            <para>
            Many Opto MMP devices may be configured to stream at one thread. Each device may be determined by
            comparing the "EndPoint" information.
            </para>
            <para>Since this is UDP, the receiver should inspect the "endpoint" address to ensure it can identify
            the correct sender of this message.</para>
            </summary>
            <param name="Message">The message given by the callback.</param>
            <param name="endpoint">The source of the message.</param>
            <param name="i32DataLength">Length of the data in bytes.</param>
            <param name="byary">The data received.</param>
            <returns>true if the received message is a valid default stream message, false if it is not.</returns>
        </member>
        <member name="M:Opto22.StreamsHelper.OptoMMPStream.BackgroundThread">
            <summary>
            The background thread that runs to empty the UDP socket.
            </summary>
        </member>
        <member name="T:Opto22.StreamsHelper.OptoMMPStream.ProcessStream">
            <summary>
            Delegate to process the stream message.
            </summary>
            <param name="Message">A raw message buffer containing the data that arrived on the UDP socket.</param>
        </member>
        <member name="T:Opto22.SerialCommunications.O22Serial">
            <summary>
            Interface for serial communications, specifically the OST 9th bit protocol.
            </summary>
        </member>
        <member name="F:Opto22.SerialCommunications.O22Serial.port">
            <summary>
            The underlying serial port interface.
            </summary>
        </member>
        <member name="F:Opto22.SerialCommunications.O22Serial.sExceptionMessage">
            <summary>
            Last exception message posted.
            </summary>
        </member>
        <member name="F:Opto22.SerialCommunications.O22Serial.bIsUsb">
            <summary>
            USB flag, just in case we may need it...
            </summary>
        </member>
        <member name="M:Opto22.SerialCommunications.O22Serial.AnticipatedByteTimeSeconds(System.Int32)">
            <summary>
            Compute anticipated byte time in seconds for a 10-bit / byte (e.g. 8N1)
            </summary>
            <param name="i32BaudRate"></param>
            <returns></returns>
        </member>
        <member name="M:Opto22.SerialCommunications.O22Serial.OpenBinaryOst(System.String,System.Int32,System.Int32,System.IO.Ports.StopBits,System.IO.Ports.Handshake,System.IO.Ports.Parity,System.Int32,System.Boolean)">
            <summary>
            Open the serial port
            </summary>
            <param name="sPort">Port to open.</param>
            <param name="i32BaudRate">Baud rate to use.</param>
            <param name="i32DataBits">Data bits of the protocol.</param>
            <param name="eStopbits">Stop bits of the protocol.</param>
            <param name="eHandshake">Handshake setting.</param>
            <param name="eParity">Parity setting.</param>
            <param name="i32ReadTimeout">Read timeout.</param>
            <param name="bIsUsb">Indicator if USB for some strange oddity if it should arise, however not currently used.</param>
            <returns>true if successful, false, check sExceptionMessage</returns>
        </member>
        <member name="M:Opto22.SerialCommunications.O22Serial.Close">
            <summary>
            Close the port
            </summary>
        </member>
        <member name="M:Opto22.SerialCommunications.O22Serial.EmptyReceiveBuffer">
            <summary>
            Empty the receive buffer
            </summary>
        </member>
        <member name="M:Opto22.SerialCommunications.O22Serial.SendOst(System.Byte,Opto22.SerialCommunications.O22Serial.OstProtocolTypes,System.Byte[],System.Int32)">
            <summary>
            Transmit a byte array with the preceeding OST header.
            </summary>
            <param name="byDestId">Serial address, 0 to 255.</param>
            <param name="eOstType">OST protocol enumeration.</param>
            <param name="byaryTx">The payload byte array to transmit.</param>
            <param name="i32TransmitLength">Length of the byte array from index 0 to transmit. Value limited to the byte array's length.</param>
        </member>
        <member name="M:Opto22.SerialCommunications.O22Serial.SendNinthBit(System.Byte[],System.Int32)">
            <summary>
            Transmit a byte array with ninth bit marking on the first byte. Postpone execution long enough to allow the entire message to emit.
            </summary>
            <param name="byaryTx">The byte array to transmit.</param>
            <param name="i32TransmitLength">Length of the byte array from index 0 to transmit.</param>
        </member>
        <member name="M:Opto22.SerialCommunications.O22Serial.Send(System.Byte[],System.Int32)">
            <summary>
            Transmit a buffer.
            </summary>
            <param name="byaryTx">Byte array to transmit.</param>
            <param name="i32TransmitLength">Length of data to transmit.</param>
        </member>
        <member name="M:Opto22.SerialCommunications.O22Serial.Receive(System.Byte[])">
            <summary>
            Generic receive method
            </summary>
            <param name="byaryRx">Received data.</param>
            <returns>The amount of data received, -1 if the port is closed.</returns>
        </member>
        <member name="M:Opto22.SerialCommunications.O22Serial.ReceiveOst(Opto22.SerialCommunications.O22Serial.OstProtocolTypes,System.Byte[],System.Int32)">
            <summary>
            Receive data pending on the port via the Ost protocol.
            </summary>
            <param name="eOstType">Expected OST enumeration of the reply.</param>
            <param name="byaryRx">The receive buffer.</param>
            <param name="i32TimeoutMs">Timeout value in milliseconds.</param>
            <returns>The number of bytes received. -1 indicates the port is closed or the port faulted (USB to serial converter disconnected).</returns>
        </member>
        <member name="M:Opto22.SerialCommunications.O22Serial.ReceiveMistic(System.Byte[],System.Int32,System.Int64@)">
            <summary>
            Receive data pending on the port. Not rigorously tested
            </summary>
            <param name="byaryRx">The receive buffer.</param>
            <param name="i32TimeoutMs">Communication timeout allowed in milliseconds.</param>
            <param name="i64ElapsedTicks">Elapsed ticks.</param>
            <returns>The number of bytes received. -1 if the port is closed or port became unavailable.</returns>
        </member>
        <member name="P:Opto22.SerialCommunications.O22Serial.ExceptionMessage">
            <summary>
            Retrieve the internal exception message
            </summary>
        </member>
        <member name="P:Opto22.SerialCommunications.O22Serial.IsOpen">
            <summary>
            Indicates if the port object is allocated.
            </summary>
        </member>
        <member name="P:Opto22.SerialCommunications.O22Serial.Available">
            <summary>
            Return the number of bytes already received by the port. Zero means no data is available. -1 indicates the port is closed.
            </summary>
        </member>
        <member name="T:Opto22.SerialCommunications.O22Serial.OstProtocolTypes">
            <summary>
            OptoMmp protocol types
            </summary>
        </member>
        <member name="F:Opto22.SerialCommunications.O22Serial.OstProtocolTypes.OptoMmp">
            <summary>
            OptoMMP on OST
            </summary>
        </member>
    </members>
</doc>
